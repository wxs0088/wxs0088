<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>打造自己的博客天地：在腾讯云服务器上部署Hexo博客</title>
      <link href="/2023/04/21/clouddeploymentblog/"/>
      <url>/2023/04/21/clouddeploymentblog/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>这个博客自创建以来也有差不多一周了，之前一直在使用GitHub Pages来搭建博客，但是由于GitHub Pages的访问速度比较慢，所以最近决定将博客迁移到腾讯云服务器上使用Nginx来做代理，这样可以实现域名访问，访问速度也会更快。</p><h3 id="二、腾讯云服务器部署Hexo博客"><a href="#二、腾讯云服务器部署Hexo博客" class="headerlink" title="二、腾讯云服务器部署Hexo博客"></a>二、腾讯云服务器部署Hexo博客</h3><h4 id="2-1-购买腾讯云服务器"><a href="#2-1-购买腾讯云服务器" class="headerlink" title="2.1 购买腾讯云服务器"></a>2.1 购买腾讯云服务器</h4><p>首先需要购买腾讯云服务器，这里推荐购买腾讯云的云服务器，因为腾讯云的云服务器性价比比较高，而且还有免费的流量，可以满足日常使用的需求。</p><h4 id="2-2-购买域名"><a href="#2-2-购买域名" class="headerlink" title="2.2 购买域名"></a>2.2 购买域名</h4><p>接下来需要购买一个域名，这里也可以使用腾讯云的域名服务，购买域名的时候需要注意一下域名的后缀，如果你购买的是<code>.cn</code>的域名，那么需要在腾讯云的域名服务中进行备案，备案需要一定的时间，所以在购买域名的时候需要注意一下。</p><p><code>服务器与域名也可以在其他云服务商处购买。</code></p><h4 id="2-3-配置域名解析"><a href="#2-3-配置域名解析" class="headerlink" title="2.3 配置域名解析"></a>2.3 配置域名解析</h4><p>在购买好域名之后，需要将域名解析到腾讯云服务器的公网IP上，这样才能通过域名访问到博客。</p><p>这些网上都有教程，这里就不再赘述了。</p><h4 id="2-4-配置腾讯云服务器"><a href="#2-4-配置腾讯云服务器" class="headerlink" title="2.4 配置腾讯云服务器"></a>2.4 配置腾讯云服务器</h4><h5 id="2-4-1-安装Git、Nginx"><a href="#2-4-1-安装Git、Nginx" class="headerlink" title="2.4.1 安装Git、Nginx"></a>2.4.1 安装Git、Nginx</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y <span class="token function">git</span> nginx</code></pre><h5 id="2-4-2-配置Git"><a href="#2-4-2-配置Git" class="headerlink" title="2.4.2 配置Git"></a>2.4.2 配置Git</h5><p><code>注意：如果本地没有配置ssh，先配一个ssh。这里因为我已经有了，就不再配置了。</code></p><p>开始前先切到<code>root</code>用户下,执行一下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token function">git</span> <span class="token comment" spellcheck="true"># 添加一个新用户</span><span class="token function">passwd</span> <span class="token function">git</span> <span class="token comment" spellcheck="true"># 设置git用户密码</span><span class="token function">su</span> <span class="token function">git</span> <span class="token comment" spellcheck="true"># 切换用户进行后续操作</span><span class="token function">cd</span> /home/git/<span class="token function">mkdir</span> -p projects/blog <span class="token comment" spellcheck="true"># 把项目目录建立起来</span><span class="token function">mkdir</span> repos <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> repos<span class="token function">git</span> init --bare blog.git <span class="token comment" spellcheck="true"># 创建仓库</span><span class="token function">cd</span> blog.git/hooks</code></pre><p>在<code>blog.git/hooks</code>目录下创建一个<code>post-receive</code>文件，内容如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/git/projects/blog --git-dir<span class="token operator">=</span>/home/git/repos/blog.git checkout -f</code></pre><p>退出vim，继续进行用户相关的操作：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x post-receive <span class="token comment" spellcheck="true"># 添加可执行权限</span></code></pre><p>退出git用户，切换到root用户，执行以下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /home/git/repos/blog.git <span class="token comment" spellcheck="true"># 给git用户添加权限</span></code></pre><p>在我们本地测试一下是否成功：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@server_ip:/home/git/repos/blog.git</code></pre><p>如果成功，会在当前目录下生成一个<code>blog</code>文件夹，目前里面是空的，因为我们还没有往里面添加文件。</p><h5 id="2-4-3-配置Nginx"><a href="#2-4-3-配置Nginx" class="headerlink" title="2.4.3 配置Nginx"></a>2.4.3 配置Nginx</h5><p>修改<code>/etc/nginx/nginx.conf</code>文件，修改以下内容：</p><p>开头</p><pre class=" language-bash"><code class="language-bash">user root<span class="token punctuation">;</span></code></pre><p>server</p><pre class=" language-bash"><code class="language-bash">server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        listen       80<span class="token punctuation">;</span>        server_name  115.159.106.35<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># Load configuration files for the default server block.</span>        include /etc/nginx/default.d/*.conf<span class="token punctuation">;</span>        location / <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        root /home/git/projects/blog<span class="token punctuation">;</span>        index index.html index.htm<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        error_page 404 /404.html<span class="token punctuation">;</span>        location <span class="token operator">=</span> /404.html <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        error_page 500 502 503 504 /50x.html<span class="token punctuation">;</span>        location <span class="token operator">=</span> /50x.html <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p><code>注意：这里的server_name需要改成你自己的域名。</code></p><h5 id="2-4-4-配置Hexo"><a href="#2-4-4-配置Hexo" class="headerlink" title="2.4.4 配置Hexo"></a>2.4.4 配置Hexo</h5><p>在本地博客目录下执行以下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-deployer-git</code></pre><p>修改<code>_config.yml</code>文件，添加以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//your_domain<span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@server_ip<span class="token punctuation">:</span>/home/git/repos/blog.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre><p><code>注意：这里的your_domain需要改成你自己的域名,repo需要改成你自己的服务器地址。</code></p><h5 id="2-4-5-部署博客"><a href="#2-4-5-部署博客" class="headerlink" title="2.4.5 部署博客"></a>2.4.5 部署博客</h5><p>在本地博客目录下执行以下命令：</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo ghexo d</code></pre><p>如果成功，会在服务器上生成一个<code>blog</code>文件夹，里面就是我们的博客了。</p><h5 id="2-4-6-访问博客"><a href="#2-4-6-访问博客" class="headerlink" title="2.4.6 访问博客"></a>2.4.6 访问博客</h5><p>启动Nginx服务并访问该博客网站，如果能正常访问，说明部署成功。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token function">enable</span> nginx.service <span class="token comment" spellcheck="true"># 设置开机启动</span><span class="token function">sudo</span> systemctl start nginx.service  <span class="token comment" spellcheck="true"># 启动服务</span><span class="token function">sudo</span> systemctl stop nginx.service   <span class="token comment" spellcheck="true"># 停止服务</span><span class="token function">sudo</span> systemctl restart nginx.service <span class="token comment" spellcheck="true"># 重启服务</span><span class="token function">sudo</span> systemctl status nginx.service <span class="token comment" spellcheck="true"># 查看服务状态</span></code></pre><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>通过本文，读者可以了解如何利用腾讯云的便捷服务快速搭建自己的Hexo博客，并将其部署到互联网上，与大家分享自己的思考和经验。期望本文对那些对博客写作有兴趣的人提供一些又新又有用的参考。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Nginx </tag>
            
            <tag> 腾讯云 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Python运行速度与依赖问题，亲测打包神器用Nuitka让你的应用程序起飞！</title>
      <link href="/2023/04/20/nuitkavspyinstaller/"/>
      <url>/2023/04/20/nuitkavspyinstaller/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>Nuitka是一个基于Python语言开发的编译器，它可以将Python代码编译成本地机器码，从而提高Python代码的运行速度。相较于传统解释器，Nuitka编译器通过消除了字节码执行过程中的一些瓶颈和无用操作，使得Python程序的执行效率大大提升。</p><p>使用Nuitka编译器编译Python代码之后，得到的是本地机器码（更具体的说是C&#x2F;C++代码），不再需要解释器进行执行，因此其运行速度比解释器执行Python代码更快，还可以将代码打包为独立的可执行文件，在没有Python环境的机器上也能够运行Python应用程序。</p><p>Nuitka不仅支持Python2和Python3，还提供了丰富的编译选项和调试工具，可以在不同平台和发布配置下生成高效、稳定和兼容性强的可执行文件。总之，Nuitka是一款非常优秀的Python编译器工具，值得开发者们尝试使用。</p><p>接下来，我们通过一个简单的示例来看一下Nuitka与PyInstaller的区别，以及如何使用Nuitka打包Python应用程序。</p><h3 id="二、Nuitka与PyInstaller的区别"><a href="#二、Nuitka与PyInstaller的区别" class="headerlink" title="二、Nuitka与PyInstaller的区别"></a>二、Nuitka与PyInstaller的区别</h3><p>Nuitka和PyInstaller都是Python打包工具，但是它们的打包方式不同，Nuitka是将Python代码编译成本地机器码，而PyInstaller是将Python代码打包成可执行文件。</p><p>Nuitka和PyInstaller的区别如下：</p><table><thead><tr><th align="left"></th><th align="left">Nuitka</th><th align="left">PyInstaller</th></tr></thead><tbody><tr><td align="left">打包方式</td><td align="left">编译成本地机器码</td><td align="left">打包成可执行文件</td></tr><tr><td align="left">打包速度</td><td align="left">快</td><td align="left">慢</td></tr><tr><td align="left">打包后的文件大小</td><td align="left">小</td><td align="left">大</td></tr><tr><td align="left">打包后的文件可移植性</td><td align="left">高</td><td align="left">低</td></tr><tr><td align="left">打包后的文件执行速度</td><td align="left">快</td><td align="left">慢</td></tr><tr><td align="left">打包后的文件占用内存</td><td align="left">小</td><td align="left">大</td></tr><tr><td align="left">打包后的文件是否需要Python环境</td><td align="left">不需要</td><td align="left">不需要</td></tr></tbody></table><h3 id="三、Nuitka与PyInstaller的安装"><a href="#三、Nuitka与PyInstaller的安装" class="headerlink" title="三、Nuitka与PyInstaller的安装"></a>三、Nuitka与PyInstaller的安装</h3><p>Nuitka与PyInstaller的安装非常简单，只需要使用pip命令即可完成安装。</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> Nuitkapip <span class="token function">install</span> PyInstaller</code></pre><p>Nuitka需要配合C++的编译器来进行打包所以还需要下载C++的编译器。</p><p>下载vs2019(MSVS)或者MinGW64，反正都是C++的编译器，随便下。</p><h3 id="四、Nuitka与PyInstaller的使用"><a href="#四、Nuitka与PyInstaller的使用" class="headerlink" title="四、Nuitka与PyInstaller的使用"></a>四、Nuitka与PyInstaller的使用</h3><h4 id="4-1-Demo编写"><a href="#4-1-Demo编写" class="headerlink" title="4.1 Demo编写"></a>4.1 Demo编写</h4><p>安装PyQt5,通过pip命令即可完成安装。</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> PyQt5</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QMessageBox<span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>initUI<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">initUI</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">'Demo'</span><span class="token punctuation">)</span>        button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'Click me'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        button<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>        button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>onButtonClick<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">onButtonClick</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        QMessageBox<span class="token punctuation">.</span>question<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'Message'</span><span class="token punctuation">,</span> <span class="token string">'Hello, World!'</span><span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Ok<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    demo <span class="token operator">=</span> Demo<span class="token punctuation">(</span><span class="token punctuation">)</span>    demo<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>首先我们需要导入PyQt5库以及sys模块。然后，我们定义一个名为Demo的类，它继承自QWidget类。在类的构造函数中调用了父类的构造函数和initUI（）方法。</p><p>在initUI（）方法中，我们设置了窗口的尺寸和标题，并创建了一个QPushButton对象。最后，将 clicked 信号连接到 onButtonClick()<br>方法上，该方法在按钮被点击时被执行。</p><p>onButtonClick（）方法只是在控制台上打印了一条消息。</p><p>最后，我们实例化QApplication类，并创建Demo对象并展示。调用sys.exit（）方法来确保程序能够完美退出。</p><p>运行程序，可以看到如下界面：</p><p><img src="https://wangxs020202.gitee.io/pbad/new/Nuitka_2023-04-20_14-39-02.gif" alt="Nuitka_2023-04-20_14-39-02"></p><h4 id="4-2-Nuitka打包"><a href="#4-2-Nuitka打包" class="headerlink" title="4.2 Nuitka打包"></a>4.2 Nuitka打包</h4><p>接下来，我们使用Nuitka将上面的Python代码编译成本地机器码，然后再运行看看效果。</p><p>首先，我们需要使用Nuitka命令将Python代码编译成本地机器码，命令如下：</p><pre class=" language-bash"><code class="language-bash">nuitka --standalone --windows-disable-console --mingw64 --nofollow-imports --show-memory --show-progress --plugin-enable<span class="token operator">=</span>pyqt5 --output-dir<span class="token operator">=</span>o 你的.py</code></pre><pre class=" language-txt"><code class="language-txt">--standalone：生成独立的可执行文件--windows-disable-console：禁用控制台窗口--mingw64：使用MinGW64编译器--nofollow-imports：不跟踪导入的模块--show-memory：显示内存占用情况--show-progress：显示打包进度--plugin-enable=qt-plugins：启用Qt插件--include-qt-plugins=sensible,styles：包含Qt插件--output-dir=o：指定输出目录</code></pre><p>Nuitka提供了丰富的编译选项，可以根据不同的需求进行选择，下面是Nuitka的编译选项列表。</p><table><thead><tr><th align="left">编译选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">–standalone</td><td align="left">生成独立的可执行文件</td></tr><tr><td align="left">–mingw64</td><td align="left">使用MinGW64编译器</td></tr><tr><td align="left">–mingw32</td><td align="left">使用MinGW32编译器</td></tr><tr><td align="left">–msvc</td><td align="left">使用MSVC编译器</td></tr><tr><td align="left">–follow-imports</td><td align="left">跟踪导入的模块</td></tr><tr><td align="left">–nofollow-imports</td><td align="left">不跟踪导入的模块</td></tr><tr><td align="left">–windows-disable-console</td><td align="left">禁用控制台窗口</td></tr><tr><td align="left">–windows-icon-from-ico</td><td align="left">使用ICO图标</td></tr><tr><td align="left">–windows-icon-from-exe</td><td align="left">使用EXE图标</td></tr><tr><td align="left">–output-dir</td><td align="left">指定输出目录</td></tr><tr><td align="left">–show-progress</td><td align="left">显示打包进度</td></tr><tr><td align="left">–show-scons</td><td align="left">显示Scons的输出</td></tr><tr><td align="left">–show-modules</td><td align="left">显示导入的模块</td></tr><tr><td align="left">–show-memory</td><td align="left">显示内存占用情况</td></tr></tbody></table><p>编译完成后，会在指定的输出目录下生成一个名为你的.exe的可执行文件，双击运行，可以看到如下界面：</p><p><img src="https://wangxs020202.gitee.io/pbad/new/Nuitka_2023-04-20_15-23-29.gif" alt="Nuitka_2023-04-20_14-39-02"></p><h4 id="4-2-PyInstaller打包"><a href="#4-2-PyInstaller打包" class="headerlink" title="4.2 PyInstaller打包"></a>4.2 PyInstaller打包</h4><p>下面我们使用PyInstaller将上面的Python代码打包，然后再运行看看效果。</p><p>首先，我们需要使用PyInstaller命令将Python代码打包成可执行文件，命令如下：</p><pre class=" language-bash"><code class="language-bash">pyinstaller -F -w 你的.py</code></pre><pre class=" language-txt"><code class="language-txt">-F：打包成一个可执行文件-w：禁用控制台窗口</code></pre><p>PyInstaller提供了丰富的打包选项，可以根据不同的需求进行选择，下面是PyInstaller的打包选项列表。</p><table><thead><tr><th align="left">打包选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-F</td><td align="left">打包成一个可执行文件</td></tr><tr><td align="left">-D</td><td align="left">打包成一个文件夹</td></tr><tr><td align="left">-w</td><td align="left">禁用控制台窗口</td></tr><tr><td align="left">-i</td><td align="left">使用ICO图标</td></tr><tr><td align="left">-c</td><td align="left">打包时不删除临时文件</td></tr><tr><td align="left">-n</td><td align="left">指定输出文件名</td></tr><tr><td align="left">-p</td><td align="left">指定第三方模块的路径</td></tr><tr><td align="left">-d</td><td align="left">指定依赖文件的路径</td></tr><tr><td align="left">-s</td><td align="left">打包时不删除临时文件</td></tr><tr><td align="left">-v</td><td align="left">打包时显示详细信息</td></tr><tr><td align="left">-h</td><td align="left">显示帮助信息</td></tr></tbody></table><p>打包完成后，会在当前目录下生成一个名为dist的文件夹，里面包含一个名为你的.exe的可执行文件，双击运行，可以看到如下界面：</p><p><img src="https://wangxs020202.gitee.io/pbad/new/Nuitka_2023-04-20_16-10-09.gif" alt="Nuitka_2023-04-20_16-10-09"></p><h3 id="五、Nuitka与PyInstaller的对比"><a href="#五、Nuitka与PyInstaller的对比" class="headerlink" title="五、Nuitka与PyInstaller的对比"></a>五、Nuitka与PyInstaller的对比</h3><h4 id="5-1-可执行文件大小"><a href="#5-1-可执行文件大小" class="headerlink" title="5.1 可执行文件大小"></a>5.1 可执行文件大小</h4><p>Nuitka打包后的可执行文件大小为 4.95M，PyInstaller打包后的可执行文件大小为 34.6M。</p><p><img src="https://wangxs020202.gitee.io/pbad/new/Nuitka_2023-04-20_16-15-37.png" alt="Nuitka_2023-04-20_16-15-37"></p><h4 id="5-2-打包速度"><a href="#5-2-打包速度" class="headerlink" title="5.2 打包速度"></a>5.2 打包速度</h4><p>Nuitka首次打包速度会有点长，时间取决于你所用的库的多少，但是第二次打包速度会很快，因为Nuitka会缓存之前的打包结果，下次打包时会直接使用缓存结果，所以第二次打包速度会很快。</p><p>PyInstaller打包速度较快，时间取决于你所用的库的多少，因为我们所引用的包就只有一个PyQt5，所以打包速度也可以接受。</p><h4 id="5-3-打包后的可执行文件运行速度"><a href="#5-3-打包后的可执行文件运行速度" class="headerlink" title="5.3 打包后的可执行文件运行速度"></a>5.3 打包后的可执行文件运行速度</h4><p>Nuitka打包后的可执行文件运行速度较快，PyInstaller打包后的可执行文件运行速度与前者对比就略显不足了。</p><h4 id="5-4-打包后的可执行文件占用内存"><a href="#5-4-打包后的可执行文件占用内存" class="headerlink" title="5.4 打包后的可执行文件占用内存"></a>5.4 打包后的可执行文件占用内存</h4><p>根据众多网友的测试得出的结果，Nuitka打包后的可执行文件占用内存较少，PyInstaller打包后的可执行文件占用内存较多。但是，作者通过demo的测试发现两者区别并不是很大，大概都在 10-15M 左右。</p><p><img src="https://wangxs020202.gitee.io/pbad/new/Nuitka_2023-04-20_16-47-58.png" alt="Nuitka_2023-04-20_16-47-58"></p><h4 id="5-5-打包后的可执行文件的兼容性"><a href="#5-5-打包后的可执行文件的兼容性" class="headerlink" title="5.5 打包后的可执行文件的兼容性"></a>5.5 打包后的可执行文件的兼容性</h4><p>Nuitka打包后的可执行文件的兼容性较好，PyInstaller打包后的可执行文件的兼容性较差。主要是在跨平台方面，Nuitka打包后的可执行文件可以在Windows、Linux、MacOS等平台上运行，而PyInstaller只能在打包平台上运行。</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>本文主要介绍了Nuitka和PyInstaller两种Python代码打包工具，介绍了它们的安装、使用方法，以及它们的对比。在实际使用中，作者发现Nuitka打包后的可执行文件的兼容性较好，运行速度较快，占用内存较少，而PyInstaller打包后的可执行文件的兼容性较差，运行速度较慢，占用内存较多。</p><p>相较于传统解释器，使用Nuitka编译器可以消除字节码执行过程中的一些瓶颈和无用操作，使得Python程序的执行效率大大提升。此外，通过编译优化，生成的可执行文件可以直接在目标平台上运行，不需要安装Python环境。同时，Nuitka提供了丰富的编译选项和调试工具，可以在不同平台和发布配置下生成高效、稳定和兼容性强的可执行文件。</p><p>总之，采用Nuitka编译器可以提高Python程序的性能和可靠性，并且拥有更好的移植性。对于Python开发者而言，学习和应用这一工具可以进一步提高Python开发的效率和质量。</p>]]></content>
      
      
      <categories>
          
          <category> Nuitka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuitka </tag>
            
            <tag> Python </tag>
            
            <tag> C++ </tag>
            
            <tag> PyQT5 </tag>
            
            <tag> PyInstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-matery主题添加Honkit电子书界面</title>
      <link href="/2023/04/19/hexo-matery-zhu-ti-tian-jia-honkit-dian-zi-shu-jie-mian/"/>
      <url>/2023/04/19/hexo-matery-zhu-ti-tian-jia-honkit-dian-zi-shu-jie-mian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>Honkit是一款基于Node.js的静态网站生成器，可以将Markdown文件转换为漂亮的静态网站或电子书形式。Honkit提供了多种主题和插件，并且具有自动化和灵活性强的特点，可以满足用户对文档撰写、发布和分享的需求，广泛应用于知识管理、技术文档等领域。</p><p>在Hexo-matery主题中添加Honkit电子书界面，可以让我们的博客同时拥有博客界面和电子书界面，这样既可以让我们的博客更加美观，又可以让我们的博客更加方便，让我们的博客更加有价值。 但是hexo只提供使用在hexo中使用Honkit主题的教程，而没有提供在Hexo-matery主题中添加Honkit电子书界面的教程。</p><p>作者在网上探索了好久，发现没有一篇教程能够让我在Hexo-matery主题中添加Honkit电子书界面，所以我决定自己写一篇教程，希望能够帮助到大家。</p><h3 id="二、使用Honkit主题"><a href="#二、使用Honkit主题" class="headerlink" title="二、使用Honkit主题"></a>二、使用Honkit主题</h3><p>如果你使用 Hexo 搭建博客，可以通过添加 Honkit 插件来支持 GitBook 风格的文档。下面是一些基本步骤：</p><ol><li><p>安装 hexo-plugin-honkit 插件：</p><p>在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">npm install hexo-plugin-honkit --save</code></pre></li><li><p>配置 _config.yml</p><p>打开你的博客根目录下的 _config.yml 文件，找到 plugins 属性并将其值设置为 honkit：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">plugins</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>plugin<span class="token punctuation">-</span>honkit</code></pre></li><li><p>添加 GitBook 风格的页面</p><p>在 source 目录下创建一个名为 docs 的文件夹，并在其中添加 Markdown 格式的文档。目录结构应该类似于以下示例：</p><pre class=" language-shell"><code class="language-shell">- source- docs    - getting-started.md    - installation.md    - ...      生成静态文件并启动服务器      在命令行中执行以下命令以生成静态文件：</code></pre></li><li><p>生成静态文件并启动服务器<br>在命令行中执行以下命令以生成静态文件：</p><pre class=" language-shell"><code class="language-shell">hexo generate</code></pre><p>完成之后执行以下命令以启动服务器并预览更改：</p><pre class=" language-shell"><code class="language-shell">hexo server</code></pre><p>此时，可以通过访问本地服务器地址（默认为 <a href="http://localhost:4000/">http://localhost:4000</a>）来查看你的博客和 GitBook 风格的页面。</p></li></ol><p>请注意，以上步骤不会影响你现有的博客主题和文章，只会添加 GitBook 风格的页面。</p><h3 id="三、在Hexo-matery主题中添加Honkit电子书界面"><a href="#三、在Hexo-matery主题中添加Honkit电子书界面" class="headerlink" title="三、在Hexo-matery主题中添加Honkit电子书界面"></a>三、在Hexo-matery主题中添加Honkit电子书界面</h3><p>作者在网上探索了好久，发现没有一篇教程能够让我在Hexo-matery主题中添加Honkit电子书界面，在多次的尝试下，最终也是曲线成功了，下面是详细的教程：</p><ol><li><p>安装Honkit</p><p>在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">npm init --yesnpm install honkit --save-dev</code></pre><p>安装完成后，执行以下命令：</p><pre class=" language-shell"><code class="language-shell">npx honkit init</code></pre></li><li><p>编写电子书</p><p>具体编写方式大家可以参考<a href="https://honkit.netlify.app/">官方文档</a>，这里不再赘述。</p></li><li><p>搭建Honkit仓库</p><p>在GitHub上创建一个新的仓库，并将我们的电子书仓库推送到GitHub上。</p><p>这里我没又找到合适的办法在<code>Hexo generate</code>的时候自动将电子书仓库推送到GitHub上，所以我只能手动推送了，如果有大佬知道怎么做的话，欢迎在评论区留言告诉我。</p></li><li><p>添加Honkit电子书界面</p><p>这里的做法其实很简单，就是在<code>Hexo generate</code>生成静态页面后将Honkit生成的静态文件放到Hexo-matery主题的<code>public</code>目录下，然后在<code>Hexo s</code>或者<code>Hexo d</code>的时候就可以将Honkit生成的静态展示到我们的博客上了。具体做法如下：</p><p>编写<code>honkit-scripts.js</code>脚本：</p><pre class=" language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>copyDir<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hexo-fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定需要复制的源目录和目标目录</span><span class="token keyword">const</span> srcPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'Honkit/_book'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> destPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public/book'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>exec<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 复制目录</span><span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行 git 命令来拉取仓库的内容 username:你的GitHub用户名 proname:你的仓库名</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'git clone git@github.com:&lt;username>/&lt;pronanme>.git --sparse&amp;&amp;cd Honkit&amp;&amp;git sparse-checkout init --cone&amp;&amp;git sparse-checkout set _book'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Honkit clone 执行出错：$&amp;#123;error&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Honkit clone 执行成功：$&amp;#123;stdout&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">copyDir</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> destPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Copy file failed!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Copy file successfully!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除临时文件</span><span class="token comment" spellcheck="true">// exec('rm-rf Honkit', (error, stdout, stderr) => &amp;#123;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'rd/s/q Honkit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Honkit文件夹删除出错：$&amp;#123;error&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Honkit文件夹删除成功：$&amp;#123;stdout&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Source path '$&amp;#123;srcPath&amp;#125;' does not exist!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>效果查看</p><p>博客的首页<br><img src="https://wangxs020202.gitee.io/pbad/new/Honkit_2023-04-19_15-44-16.png" alt="Honkit_2023-04-19_15-44-16"></p><p>电子书的首页<br><img src="https://wangxs020202.gitee.io/pbad/new/Honkit_2023-04-19_15-44-42.png" alt="Honkit_2023-04-19_15-44-42"></p></li></ol><h3 id="四、结尾"><a href="#四、结尾" class="headerlink" title="四、结尾"></a>四、结尾</h3><p>虽然我们并没有在hexo-matery主题中添加Honkit电子书界面部署，但是我们通过脚本的方式将Honkit生成的静态文件放到了Hexo-matery主题的public目录下，然后在<code>Hexo s</code>或者<code>Hexo d</code>的时候就可以将Honkit生成的静态展示到我们的博客上了。</p><p>这里的教程只是简单的介绍了如何在Hexo-matery主题中添加Honkit电子书界面，如果大家有什么问题或者建议，欢迎在评论区留言，我会尽快回复大家的。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Honkit </tag>
            
            <tag> 静态网站 </tag>
            
            <tag> 电子书 </tag>
            
            <tag> Shell </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探究Celery的分布式任务队列在Python应用中的优越性</title>
      <link href="/2023/04/14/tan-suo-celery/"/>
      <url>/2023/04/14/tan-suo-celery/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Celery简介"><a href="#一、Celery简介" class="headerlink" title="一、Celery简介"></a>一、Celery简介</h3><p>Celery是一款Python语言编写的分布式任务队列框架，它基于消息中间件（如RabbitMQ、Redis等）实现异步任务的处理和调度，支持调度任务的排队、重试、回调以及监控报告等多种功能，解决了复杂业务场景下的处理效率问题。相比于其他同类框架，Celery具有更快的执行速度、更好的容错机制、更灵活的部署方式等优势。</p><h3 id="二、Celery的基本原理"><a href="#二、Celery的基本原理" class="headerlink" title="二、Celery的基本原理"></a>二、Celery的基本原理</h3><p>Celery的核心组件如下图所示：</p><p><img src="https://wangxs020202.gitee.io/images/me/celery.png" alt="Celery的核心组件"></p><p>Celery的核心组件如下：</p><ul><li>Task 任务</li></ul><p>Task是Celery的核心概念，代表一个需要异步执行的工作单元，开发者可以自行定义Task，并配置Task的一些属性，比如处理逻辑、超时时间、重试次数等。每个Task都必须定义一个run方法，Celery会在异步队列中选取合适的Worker执行该方法，并返回执行结果。</p><ul><li>Broker 中间件</li></ul><p>Broker是Celery中任务调度和消息传递的核心组件，其作用是将程序添加到队列中，以便在消费端的Worker中执行。Celery支持多种编程语言的消息中间件，包括RabbitMQ、Redis 、AMQP等。开发者可以根据实际情况选择最合适的Broker，以保证性能和可靠性。</p><ul><li>Worker 工作者</li></ul><p>Worker是Celery代码节点的执行者，它从中间件检索任务，将其发送给线程或进程池来处理任务，然后返回执行结果。我们可以使用Celery命令启动多个worker并分别配置不同的concurrency（并发数）和queues（任务队列），以实现更灵活和高效的任务调度。同时，Celery还提供了守护进程等方式运行worker，保证任务的持续运行。</p><h3 id="三、Celery的应用场景"><a href="#三、Celery的应用场景" class="headerlink" title="三、Celery的应用场景"></a>三、Celery的应用场景</h3><p>Celery的应用场景主要包括：</p><ul><li>Web应用</li></ul><p>Web应用通常需要处理大量复杂的请求，其中很多操作可能需要跟第三方服务集成（比如文件上传、邮箱验证等）。这样大量的I&#x2F;O操作会严重阻塞单进程应用的执行效率。通过使用Celery异步任务处理，可以将耗时的操作放到worker中异步执行，使得web应用变得响应更快、请求得到更加迅速的处理。判断与处理输入数据属性值的程序就是一个解释远程调用 Flask + Celery正在演示的场景。</p><ul><li>爬虫和数据处理</li></ul><p>很多爬虫和数据处理需要大量时间和计算资源来完成，当这些任务都阻塞在爬虫进程或数据接口的处理上时，如果采用同步串起来的方式，会让进程直接卡死或数据运算量庞大浪费 CPU 资源，而异步任务队列给了工具箱能力范式以及收获事件驱动的思想，不仅可以减轻内存峰值后会导致启动失败的负担。还能有效减少单进程数据计算的待机等待,同时重试机制也容易解决部分由于网络或者其他原因导致数据处理失败的问题，大幅度提升爬虫和数据处理的性能和可靠性。</p><ul><li>邮件发送</li></ul><p>邮件发送是一项常见且需要高可靠性的任务，但是受限于DNS查询和SMTP连接限制，频繁地发送多个电子邮件可能会导致单进程应用无法从阻塞中恢复。使用Celery异步任务队列和邮件发送插件（如Flower等），可以使得邮件任务全部放到后台worker处理，保证前端应用不卡死并且全面监管邮件本身的发送状态。</p><h3 id="四、Celery的集成"><a href="#四、Celery的集成" class="headerlink" title="四、Celery的集成"></a>四、Celery的集成</h3><h4 id="4-1-集成Flask"><a href="#4-1-集成Flask" class="headerlink" title="4.1 集成Flask"></a>4.1 集成Flask</h4><p>Flask是一个基于Python的轻量级Web应用框架，它提供了简单的API来实现Web应用的开发。Celery可以很方便地集成到Flask应用中，实现异步任务的处理和调度。</p><p>下面我们以一个简单的使用Flask+Celery搭建任务队列的Web应用为例进行说明，期望通过 Celery 来发挥异步任务在实际业务场景中的各种优势。</p><p>首先按照Celery官网的安装指引，安装好必备的依赖之后，在项目目录下编辑main.py文件来定义Celery的运行以及如何处理任务。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment" spellcheck="true">#创建celery实例对象</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">"tasks"</span><span class="token punctuation">,</span>broker<span class="token operator">=</span><span class="token string">"redis://localhost:6379/0"</span><span class="token punctuation">,</span>backend<span class="token operator">=</span><span class="token string">"redis://localhost:6379/0"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定义任务函数，并设置超时参数</span>@app<span class="token punctuation">.</span>task<span class="token punctuation">(</span>bind<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> default_retry_delay<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task_logout</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#执行具体操作，并返回结果信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Start to logout for user &amp;#123;user_email&amp;#125; at &amp;#123;time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> <span class="token string">"User has been logged out"</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#如果出现异常，则重试</span>    self<span class="token punctuation">.</span>retry<span class="token punctuation">(</span>exc<span class="token operator">=</span>ex<span class="token punctuation">)</span></code></pre><p>在main.py文件中，我们首先创建了一个Celery实例对象app，并配置了broker和backend。broker用于接收任务，backend用于存储任务执行结果。然后我们定义了一个task_logout的任务函数，该函数接收一个user_email参数，执行具体的操作，并返回执行结果。</p><h4 id="4-2-集成Django"><a href="#4-2-集成Django" class="headerlink" title="4.2 集成Django"></a>4.2 集成Django</h4><p>Django是一个基于Python的开源Web应用框架，它遵循MVT（Model-View-Template）的设计模式，提供了强大的ORM功能。Celery可以很方便地集成到Django应用中，实现异步任务的处理和调度。</p><p>下面我们以一个简单的使用Django+Celery搭建任务队列的Web应用为例进行说明，期望通过 Celery 来发挥异步任务在实际业务场景中的各种优势。</p><p>1、安装对应的库</p><pre class=" language-python"><code class="language-python">pip3 install celery<span class="token operator">==</span><span class="token number">4.4</span><span class="token punctuation">.</span><span class="token number">2</span>pip3 install eventlet<span class="token operator">==</span><span class="token number">0.25</span><span class="token punctuation">.</span><span class="token number">2</span>pip3 install Django<span class="token operator">==</span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">4</span></code></pre><p>2、配置settings文件：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#redis</span>CELERY_BROKER_URL <span class="token operator">=</span> <span class="token string">'redis://localhost:6379/'</span><span class="token comment" spellcheck="true">#broker配置redis</span>CELERY_RESULT_BACKEND <span class="token operator">=</span> <span class="token string">'redis://localhost:6379/'</span><span class="token comment" spellcheck="true">#文件格式为：json</span>CELERY_RESULT_SERIALIZER <span class="token operator">=</span> <span class="token string">'json'</span></code></pre><p>3、在settings文件同级目录创建celery.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token punctuation">,</span> unicode_literals<span class="token keyword">import</span> os<span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token comment" spellcheck="true"># 设置环境变量</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'Django项目名称.settings'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注册Celery的APP</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'Django项目名称'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绑定配置文件</span>app<span class="token punctuation">.</span>config_from_object<span class="token punctuation">(</span><span class="token string">'django.conf:settings'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'CELERY'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 自动发现各个app下的tasks.py文件</span>app<span class="token punctuation">.</span>autodiscover_tasks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#如果有需要可以将该任务设置成定时任务</span><span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabCELERY_BEAT_SCHEDULE <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token comment" spellcheck="true"># 周期性任务</span>    <span class="token string">'task-one'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'myapp.tasks.print_test'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> 周期时间<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'args': ()</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>4、修改settings文件同级目录的init.py文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token punctuation">,</span> unicode_literals<span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app <span class="token keyword">as</span> celery_app<span class="token comment" spellcheck="true">#导包</span><span class="token keyword">import</span> pymysql<span class="token comment" spellcheck="true">#初始化</span>pymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span>__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'celery_app'</span><span class="token punctuation">]</span></code></pre><p>5、在应用中创建tasks.py文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery<span class="token punctuation">.</span>task <span class="token keyword">import</span> task<span class="token comment" spellcheck="true"># 自定义要执行的task任务</span>@task<span class="token keyword">def</span> <span class="token function">print_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"nict try"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'hello'</span></code></pre><p>6、在视图页面进行调用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> myapp <span class="token keyword">import</span> tasks<span class="token keyword">def</span> <span class="token function">ctest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token operator">=</span>tasks<span class="token punctuation">.</span>print_test<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#delay方法就是异步方式请求</span>    <span class="token comment" spellcheck="true">#任务逻辑</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'status':'successful','task_id':res.task_id&amp;#125;)</span></code></pre><p>7、 在manage.py的目录下启动celery服务</p><pre class=" language-python"><code class="language-python">celery worker <span class="token operator">-</span>A mydjango <span class="token operator">-</span>l info <span class="token operator">-</span>P eventlet</code></pre><p>8、 在浏览器中调用异步服务接口</p><p><img src="https://wangxs020202.gitee.io/images/me/celery1.png" alt="celery"></p><p>同时也可以在backend中查询任务结果</p><p><img src="https://wangxs020202.gitee.io/images/me/celery2.png" alt="celery"></p><p>*****注：redis中的key并不是单纯的task_id，而是需要加上前缀celery-task-meta-</p><p>9、最后，如果需要启动定时任务，就需要在manage.py所在的文件夹内单独启动beat服务</p><pre class=" language-python"><code class="language-python">celery <span class="token operator">-</span>A mydjango beat <span class="token operator">-</span>l info</code></pre><h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><p>本文主要介绍了Celery的基本概念、应用场景、使用、集成等内容，希望能够帮助到大家。</p>]]></content>
      
      
      <categories>
          
          <category> Celery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Celery </tag>
            
            <tag> 分布式任务队列 </tag>
            
            <tag> 异步任务处理 </tag>
            
            <tag> Django </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是嫉妒，还是营销。知乎热问：国家何时整治程序员的高薪现象？</title>
      <link href="/2023/04/14/hot-spot-one/"/>
      <url>/2023/04/14/hot-spot-one/</url>
      
        <content type="html"><![CDATA[<h3 id="一、国家何时整治程序员的高薪现象？"><a href="#一、国家何时整治程序员的高薪现象？" class="headerlink" title="一、国家何时整治程序员的高薪现象？"></a>一、国家何时整治程序员的高薪现象？</h3><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/image-20210815134358692.png" alt="image-20210815134358692"></p><p>近期在知乎上看到了这样一个问题，身为程序员的我好奇的进去看了一下。心想这一定是某个营销号发出来，为了博人眼球的。</p><p>知乎上本身就混迹着很多程序员，马上就有很多人来回答</p><p><strong>点赞并评论第一的，知友「硅谷IT胖子」算是说出了大部分开发者的心声！下面是他的回答：</strong></p><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/image-20210815135658683.png" alt="image-20210815135658683"></p><p>我看到这个热问的时候，标题并不是 “国家何时整治程序员的高薪现象？”，而是 “如何看待互联网行业收入远高于其他行业现象？”，或许题主觉得设计国家有些不妥，遂将其修改？</p><p><strong>之友[编程指北]的回答直击问题，下面是他的回答：</strong></p><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/image-20210815140247908.png" alt="image-20210815140247908"></p><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/image-20210815140300829.png" alt="image-20210815140300829"></p><p><em>对于[硅谷IT胖子]的回答是否说出了你们心声？</em></p><p>作为一名程序员，深知互联网行业的水有多深。在程序员的圈子里，没有官二代，也没有富二代，更没有有背景的人物。本身踏上这个职业的门槛就比较高，同时我们的工作时间，相信也是很多职业无法比的。</p><p>所以，大部分开发者的收入其实也都是辛苦钱。就如 「硅谷IT胖子」说得，这份钱我们赚的最诚实、最辛苦、最光明正大！</p><p>由这个问题可以看出它折射出的内核非常典型，不仅仅是专门某个行业，而是一种很常见的底层互害思维。</p><p>网络上有很多这样的段子，朋友，亲戚在你没有腾达时，对你不管不问，一旦你好起来，甚至都不需要到大富大贵的地步，另一方就抓狂了，跳脚了，各种扭曲的行为全都来了。</p><h3 id="二、程序员挣得多么？"><a href="#二、程序员挣得多么？" class="headerlink" title="二、程序员挣得多么？"></a>二、程序员挣得多么？</h3><p>2020年1月到2021年1月，各城市程序员的工资。程序员的薪资数据，在圈子里面是非常透明的，在各大网站上都能查到，从表中的数据来看2020年1月到2021年1月程序员的平均工资在15000左右，不同城市有不同的差异。</p><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/v2-349af7682a22b536703f64e6998d387a_720w.png" alt="image-20210815140300829"></p><p>这个工资在各个行业中的水平算是高的，但是为什么这么高？</p><p>国家目前能力强的程序员并不多，甚至有的科班出身的程序员大学四年甚至不会编码。为了迎合国家的科技创新，企业为了找的高质量的程序员会提高薪资，来刺激有能力的程序员。但是这种高质量的程序员在中国并不是很多，所以大多数企业的资本家以低薪资，来招能力不是很强的毕业生。</p><p><strong>在风口上 连猪都会飞</strong>，确实资本家都抓住了科技创新这个风口，那么程序员这个行业是否在风口。</p><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/pig.png" alt="image-20210815140300829"></p><p>是的，但是程序员只不过是中间的程序，得利的都是最后的资本家。资本家在程序员后操盘，使得在互联网行业中出现很多网络新语。什么<strong>996</strong>，<strong>阿里高管不法侵害女员工事件</strong>，<strong>拼多多员工跳楼</strong>等这些互联网的词条在近几年层出不穷。</p><p>如果说整治，最该整治的是谁？是程序员们背后的那些资本大佬，是那些为了攫取流量而哗众取宠的明星和网红。</p><p>资本利用钞能力，令外卖员困在系统里出不来，让无数市场小贩失去养家糊口的机会；流量明星日赚一爽，拍出一部部翔一样的偶像剧来辣观众的眼睛；网红们靠审丑来赚钱，无所不用其极。你说谁更不合理，谁更该整治？</p><p>和他们相比，程序员赚钱全凭自己能力，既正当又合理，简直是励志典型了好吗？！</p><p>程序员行业很可能是未来的华尔街。实际上2015年以后，已经有些技术人才博士毕业后，不再去华尔街而去Google等公司了。很多人惊叹：写码的原来也开始有选技术公司而不是金融的了！</p><p>讲这么多，不是说不能整治程序员，那归国家管。而是说整治的方式和效果——尤其是当前程序员收入透明、行业干净无外块、守法报税的情况下，真的很难抓到把柄。</p><p>而且程序员是真创造价值的人——我记得民间有个指数，就是用公司总营业额除以总程序员人数，看每个程序员平均创造多少价值，多年以前的数据是：Google大概100万美元&#x2F;年每人，FB好像也接近100万，微软60万左右。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>在现代社会，技术岗位的薪酬收入普遍较高，尤其是一些优秀的程序员和IT专业人士。针对这种现象，不同的人有不同的观点和态度。</p><p>有些人可能存在嫉妒心理，认为程序员赚得太多而不公平，并呼吁政府开展相关整治行动。但是这种视角忽略了市场经济的基本规律以及技术人才需求供应的实际情况，未必能解决事实上的问题。</p><p>另外一些人则从营销的角度出发，为自己的产品、服务或公司招聘人才进行激励，宣传高薪福利等，以此来吸引更多人才。他们意识到，与其抱怨当前薪酬状况，不如通过各种手段提高影响力和知名度，从而增强自己的议价能力和竞争力。</p><p>综上所述，针对程序员高薪现象，个人或团体可以选择不同的应对策略。对于政府而言，也应该关注人才培养、铺平晋升通道、放宽准入机制等方面发力，打造更加公平和有竞争力的市场环境。</p>]]></content>
      
      
      <categories>
          
          <category> 热点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热点 </tag>
            
            <tag> 程序员 </tag>
            
            <tag> 薪资 </tag>
            
            <tag> 高薪 </tag>
            
            <tag> 知乎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建ClickHouse+Zookeeper集群</title>
      <link href="/2023/04/14/docker-da-jian-clickhouse-zookeeper-ji-qun/"/>
      <url>/2023/04/14/docker-da-jian-clickhouse-zookeeper-ji-qun/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>Docker搭建ClickHouse+Zookeeper集群，是一种高效、灵活和可靠的解决方案，能够满足大规模数据处理和分析的需求。ClickHouse是一款开源的面向列存储的分布式数据库，可以快速地处理大范围的实时数据。而Zookeeper则是一个分布式的协调框架，为ClickHouse提供了多个节点之间协作运作的支持。</p><p>该集群的优势在于，Docker将应用程序、库和依赖项打包成标准镜像并提供容器隔离，简化了 ClickHouse 和 Zookeeper 的配置和部署流程，同时带来更灵活的资源分配和使用。并且，在集群中添加或移除节点都可以实现弹性扩缩容，在保证服务的质量和稳定性的同时，节约了企业的资源成本。</p><p>在这篇博客中，我们将会介绍如何借助Docker技术，使用Docker-Compose将ClickHouse+Zookeeper集群快速搭建至本地环境，并对集群的扩展、管理以及数据备份等方面进行深入的探讨。无论是初学者还是资深的技术爱好者，都能从中获得有价值的经验和知识，进一步掌握 Docker和分布式数据库基础知识，提高工作效率和技术实力。</p><h3 id="二、搭建"><a href="#二、搭建" class="headerlink" title="二、搭建"></a>二、搭建</h3><ol><li><p>需要创建一台<code>Ubuntu</code>系统的主机&#x2F;虚拟机</p></li><li><p>更换apt源</p><pre class=" language-shell"><code class="language-shell"># 备份信息sudo cp /etc/apt/sources.list /etc/apt/sources.list.bat# 打开配置文件进行修改sudo vi /etc/apt/sources.list# 删除所有数据换成一下信息</code></pre><pre class=" language-reStructuredText"><code class="language-reStructuredText">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable# deb-src [arch=amd64] https://download.docker.com/linux/ubuntu focal stable</code></pre><pre class=" language-shell"><code class="language-shell"># 更新aptsudo apt-get update</code></pre></li><li><p>搭建docker环境</p><pre class=" language-shell"><code class="language-shell"># 卸载旧的docker环境sudo apt-get remove docker docker-engine docker-ce docker.io# 安装以下包以使apt可以通过HTTPS使用存储库（repository）：sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common# 添加Docker官方的GPG密钥：curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -# 使用下面的命令来设置stable存储库：sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"# 安装最新版本的Docker CE：这个根据网络情况会比较慢sudo apt-get install -y docker-ce# 查看docker服务状态systemctl status docker# 如果没启动，则启动docker服务sudo systemctl start docker# 修改docker源# 进入阿里云 复制 加速器地址https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors# 修改/创建daemon配置文件/etc/docker/daemon.json来使用加速器sudo vim /etc/docker/daemon.json# 复制一下信息&#123;  "registry-mirrors": ["https://xxxxxxxx.mirror.aliyuncs.com"]&#125;</code></pre></li><li><p>拉取<code>yandex/clickhouse-server</code>、<code>zookeeper</code>镜像</p><pre class=" language-shell"><code class="language-shell">docker pull yandex/clickhouse-serverdocker pull zookeeper</code></pre></li><li><p>复制虚拟机</p><p>使用VMware直接复制</p></li><li><p>修改hosts</p><pre class=" language-shell"><code class="language-shell"># 三台服务器的ip分别是：117、105、103# 分别修改三台服务器的hosts文件vim /etc/hosts# 服务1 的ip192.168.3.117 server01# 服务2 的ip192.168.3.105 server02# 服务3 的ip192.168.3.103 server03</code></pre></li><li><p>Zookeeper集群搭建</p><pre class=" language-shell"><code class="language-shell"># 创建zk配置信息存放文件sudo mkdir /usr/softsudo mkdir /usr/soft/zookeeper</code></pre><p><strong>server01执行：</strong></p><pre class=" language-shell"><code class="language-shell">docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 --name zookeeper_node --restart always \-v /usr/soft/zookeeper/data:/data \-v /usr/soft/zookeeper/datalog:/datalog \-v /usr/soft/zookeeper/logs:/logs \-v /usr/soft/zookeeper/conf:/conf \--network host  \-e ZOO_MY_ID=1  zookeeper</code></pre><p><strong>server02执行：</strong></p><pre class=" language-shell"><code class="language-shell">docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 --name zookeeper_node --restart always \-v /usr/soft/zookeeper/data:/data \-v /usr/soft/zookeeper/datalog:/datalog \-v /usr/soft/zookeeper/logs:/logs \-v /usr/soft/zookeeper/conf:/conf \--network host  \-e ZOO_MY_ID=2  zookeeper</code></pre><p><strong>server03执行：</strong></p><pre class=" language-shell"><code class="language-shell">docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 --name zookeeper_node --restart always \-v /usr/soft/zookeeper/data:/data \-v /usr/soft/zookeeper/datalog:/datalog \-v /usr/soft/zookeeper/logs:/logs \-v /usr/soft/zookeeper/conf:/conf \--network host  \-e ZOO_MY_ID=3  zookeeper</code></pre><p>唯一的差别是： <code>-e ZOO_MY_ID=*</code> 而已。</p></li><li><p>修改zookeeper配置文件</p><p><code>/usr/soft/zookeeper/conf/zoo.cfg</code></p><pre class=" language-shell"><code class="language-shell">dataDir=/datadataLogDir=/datalogtickTime=2000initLimit=5syncLimit=2clientPort=2181autopurge.snapRetainCount=3autopurge.purgeInterval=0maxClientCnxns=60# 服务1 的ipserver.1=192.168.3.117:2888:3888# 服务2 的ipserver.2=192.168.3.105:2888:3888# 服务3 的ipserver.3=192.168.3.103:2888:3888</code></pre></li><li><p>验证zookeeper是否配置成功</p><pre class=" language-shell"><code class="language-shell">docker exec -it zookeeper_node /bin/bash./bin/zkServer.sh status</code></pre><p><strong>成功结果</strong></p><pre class=" language-shell"><code class="language-shell">ZooKeeper JMX enabled by defaultUsing config: /conf/zoo.cfgClient port found: 2181. Client address: localhost. Client SSL: false.Mode: follower</code></pre></li><li><p>Clickhouse集群部署</p><ul><li><p>拷贝出临时镜像配置</p><pre class=" language-shell"><code class="language-shell"># 运行一个临时容器，目的是为了将配置、数据、日志等信息存储到宿主机上：docker run --rm -d --name=temp-ch yandex/clickhouse-server# 拷贝容器内的文件：docker cp temp-ch:/etc/clickhouse-server/ /etc/</code></pre></li><li><p>修改配置文件<code>/etc/clickhouse-server/config.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listen_host</span><span class="token punctuation">></span></span>0.0.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listen_host</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timezone</span><span class="token punctuation">></span></span>Asia/Shanghai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timezone</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remote_servers</span> <span class="token attr-name">incl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickhouse_remote_servers<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include_from</span><span class="token punctuation">></span></span>/etc/clickhouse-server/metrika.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include_from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zookeeper</span> <span class="token attr-name">incl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zookeeper-servers<span class="token punctuation">"</span></span> <span class="token attr-name">optional</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span> <span class="token attr-name">incl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>macros<span class="token punctuation">"</span></span> <span class="token attr-name">optional</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li><li><p>拷贝配置文件到挂载文件下</p><pre class=" language-shell"><code class="language-shell"># 分别在server01 server02 server03 执行创建指令# 创建挂载文件 miansudo mkdir /usr/soft/clickhouse-serversudo mkdir /usr/soft/clickhouse-server/mainsudo mkdir /usr/soft/clickhouse-server/main/conf# 创建挂载文件 subsudo mkdir /usr/soft/clickhouse-server/subsudo mkdir /usr/soft/clickhouse-server/sub/conf# 拷贝配置文件cp -rf /etc/clickhouse-server/ /usr/soft/clickhouse-server/main/confcp -rf /etc/clickhouse-server/ /usr/soft/clickhouse-server/sub/conf</code></pre></li><li><p>修改每台服务器的scp配置</p><pre class=" language-shell"><code class="language-shell">vim /etc/ssh/sshd_config# 修改PermitRootLogin yes# 重启服务systemctl restart sshd </code></pre></li><li><p>分发到其他服务器</p><pre class=" language-shell"><code class="language-shell"># 拷贝配置到server02上scp -r /usr/soft/clickhouse-server/main/conf/ server02:/usr/soft/clickhouse-server/main/scp -r /usr/soft/clickhouse-server/sub/conf/ server02:/usr/soft/clickhouse-server/sub/# 拷贝配置到server03上scp -r /usr/soft/clickhouse-server/main/conf/ server03:/usr/soft/clickhouse-server/main/scp -r /usr/soft/clickhouse-server/sub/conf/ server03:/usr/soft/clickhouse-server/sub/</code></pre></li><li><p>删除掉临时容器</p><pre class=" language-shell"><code class="language-shell">docker rm -f temp-ch</code></pre></li><li><p>进入<code>server01</code>修改<code>/usr/soft/clickhouse-server/sub/conf/config.xml</code>为了和主分片 <strong>main</strong>的配置区分开来</p><pre class=" language-XML"><code class="language-XML">原：<http_port>8123</http_port><tcp_port>9000</tcp_port><mysql_port>9004</mysql_port><postgresql_port>9005</postgresql_port><interserver_http_port>9009</interserver_http_port>修改为：<http_port>8124</http_port><tcp_port>9001</tcp_port><mysql_port>9005</mysql_port><!--<postgresql_port>9005</postgresql_port>--><interserver_http_port>9010</interserver_http_port></code></pre><p><strong>server02</strong>和<strong>server03</strong>如此修改或scp命令进行分发</p></li><li><p><code>server01</code>新增集群配置文件<code>/usr/soft/clickhouse-server/main/conf/metrika.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>yandex</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- CH集群配置,所有服务器都一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clickhouse_remote_servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cluster_3s_1r</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片1  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片2  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片3  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cluster_3s_1r</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clickhouse_remote_servers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- zookeeper_servers所有实例配置都一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zookeeper-servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.117<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.105<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.103<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zookeeper-servers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- marcos每个实例配置不一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-01-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>networks</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ip</span><span class="token punctuation">></span></span>::/0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ip</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>networks</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 数据压缩算法  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clickhouse_compression</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>min_part_size</span><span class="token punctuation">></span></span>10000000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>min_part_size</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>min_part_size_ratio</span><span class="token punctuation">></span></span>0.01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>min_part_size_ratio</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>method</span><span class="token punctuation">></span></span>lz4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clickhouse_compression</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>yandex</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>server01</code>新增集群配置文件<code>/usr/soft/clickhouse-server/sub/conf/metrika.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>yandex</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- CH集群配置,所有服务器都一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clickhouse_remote_servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cluster_3s_1r</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片1  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片2  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片3  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cluster_3s_1r</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clickhouse_remote_servers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- zookeeper_servers所有实例配置都一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zookeeper-servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.117<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.105<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.103<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zookeeper-servers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- marcos每个实例配置不一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-02-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>networks</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ip</span><span class="token punctuation">></span></span>::/0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ip</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>networks</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 数据压缩算法  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clickhouse_compression</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>min_part_size</span><span class="token punctuation">></span></span>10000000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>min_part_size</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>min_part_size_ratio</span><span class="token punctuation">></span></span>0.01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>min_part_size_ratio</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>method</span><span class="token punctuation">></span></span>lz4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clickhouse_compression</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>yandex</span><span class="token punctuation">></span></span></code></pre></li><li><p>将<code>server01</code>新增的两个<code>metrika.xml</code>文件分发到<code>server02</code>,<code>server03</code></p><pre class=" language-shell"><code class="language-shell"># server02scp -r /usr/soft/clickhouse-server/main/conf/metrika.xml server02:/usr/soft/clickhouse-server/main/confscp -r /usr/soft/clickhouse-server/sub/conf/metrika.xml server02:/usr/soft/clickhouse-server/sub/conf# server03scp -r /usr/soft/clickhouse-server/main/conf/metrika.xml server03:/usr/soft/clickhouse-server/main/confscp -r /usr/soft/clickhouse-server/sub/conf/metrika.xml server03:/usr/soft/clickhouse-server/sub/conf</code></pre></li><li><p>修改<code>server02</code>,<code>server03</code>的<code>metrika.xml</code>文件</p><pre class=" language-xml"><code class="language-xml"># server02 main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-02-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span># server02 sub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-03-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span># server03 main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-03-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span># server03 sub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-01-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span></code></pre><p><strong>至此，已经完成全部配置，其他的比如密码等配置，可以按需增加。</strong></p></li></ul></li><li><p>集群运行与测试</p><p>在每一台服务器上依次运行实例，zookeeper前面已经提前运行，没有则需先运行zk集群</p><p><strong>在每台服务器执行命令，唯一不同的参数是hostname</strong></p><ul><li><p>运行main实例</p><pre class=" language-shell"><code class="language-shell">docker run -d --name=ch-main -p 8123:8123 -p 9000:9000 -p 9009:9009 --ulimit nofile=262144:262144 \-v /usr/soft/clickhouse-server/main/data:/var/lib/clickhouse:rw \-v /usr/soft/clickhouse-server/main/conf:/etc/clickhouse-server:rw \-v /usr/soft/clickhouse-server/main/log:/var/log/clickhouse-server:rw \--add-host server01:192.168.3.117 \--add-host server02:192.168.3.105 \--add-host server03:192.168.3.103 \--hostname server01 \--network host \--restart=always \ yandex/clickhouse-server</code></pre></li><li><p>运行sub实例</p><pre class=" language-shel"><code class="language-shel">docker run -d --name=ch-sub -p 8124:8124 -p 9001:9001 -p 9010:9010 --ulimit nofile=262144:262144 \-v /usr/soft/clickhouse-server/sub/data:/var/lib/clickhouse:rw \-v /usr/soft/clickhouse-server/sub/conf:/etc/clickhouse-server:rw \-v /usr/soft/clickhouse-server/sub/log:/var/log/clickhouse-server:rw \--add-host server01:192.168.3.117 \--add-host server02:192.168.3.105 \--add-host server03:192.168.3.103 \--hostname server01 \--network host \--restart=always \ yandex/clickhouse-server</code></pre></li><li><p>在每台服务器的实例都启动之后，这里使用正版DataGrip来打开</p></li><li><p>执行 <code>select * from system.clusters</code> 查询集群</p></li><li><p>在任一实例上新建一个查询</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> T_UserTest <span class="token keyword">on</span> cluster cluster_3s_1r<span class="token punctuation">(</span>    ts  <span class="token keyword">DateTime</span><span class="token punctuation">,</span>    uid String<span class="token punctuation">,</span>    biz String<span class="token punctuation">)</span>    <span class="token keyword">engine</span> <span class="token operator">=</span> ReplicatedMergeTree<span class="token punctuation">(</span>'<span class="token operator">/</span>clickhouse<span class="token operator">/</span><span class="token keyword">tables</span><span class="token operator">/</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;layer&amp;#125;-&amp;#123;shard&amp;#125;/T_UserTest', '&amp;#123;replica&amp;#125;')</span>        <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> toYYYYMMDD<span class="token punctuation">(</span>ts<span class="token punctuation">)</span>        <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ts        SETTINGS index_granularity <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span></code></pre><p><strong>cluster_3s_1r是前面配置的集群名称，需一一对应上， &#x2F;clickhouse&#x2F;tables&#x2F; 是固定的前缀，相关语法可以查看官方文档了。</strong></p><p>刷新每个实例，即可看到全部实例中都有这张T_UserTest表，因为已经搭建zookeeper，很容易实现分布式DDL。</p></li><li><p>新建Distributed分布式表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> T_UserTest_All <span class="token keyword">ON</span> CLUSTER cluster_3s_1r <span class="token keyword">AS</span> T_UserTest <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">Distributed</span><span class="token punctuation">(</span>cluster_3s_1r<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">,</span>  T_UserTest<span class="token punctuation">,</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>每个主分片分别插入相关信息：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--server01</span><span class="token keyword">insert</span> <span class="token keyword">into</span>  T_UserTest <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2021-08-16 17:00:00'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--server02</span><span class="token keyword">insert</span> <span class="token keyword">into</span>  T_UserTest <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2021-08-16 17:00:00'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--server03</span><span class="token keyword">insert</span> <span class="token keyword">into</span>  T_UserTest <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2021-08-16 17:00:00'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><strong>查询对应的副本表或者关闭其中一台服务器的docker实例，查询也是不受影响，时间关系不在测试</strong></p></li></ul></li></ol><h3 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h3><p>本篇博客介绍了如何借助Docker技术，通过使用Docker-Compose快速搭建ClickHouse+Zookeeper集群，并实现扩展节点、数据备份等资料处理方案，最终实现了高可靠性、高性能和高灵活性的大数据处理和分析。这种基于容器化、分布式技术的解决方案与传统中心式单体架构相比，具有更好的故障处理、增强效率、运维便利和易于管理等多方面的优越性。</p><p>在搭建过程中，我们深入探究了ClickHouse 和 Zookeeper 的特性及用途，在容器环境下运行它们并配置好了每个组件的网络和访问方法。我们同时关注到容器资源的调配策略、数据备份的独立存储、服务治理的容错性等问题，帮助读者全面掌握了 Docker 集群管理和优化的基本方法。</p><p>总之，本篇博客旨在提供一种端到端指导，使您更好地了解使用 Docker 搭建 ClickHouse+Zookeeper 集群的过程，可以在企业级大数据应用中发挥出强大的作用，并极大地促进业务发展。希望在今后的工作中为读者提供启示和指导，让技术更好的转化为实际价值。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db </tag>
            
            <tag> Docker </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
