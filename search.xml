<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用DockerHub在Centos7.6环境下部署Nginx反向代理Gunicorn+Flask独立架构</title>
      <link href="/2023/05/28/page-id-4/"/>
      <url>/2023/05/28/page-id-4/</url>
      
        <content type="html"><![CDATA[<h3 id="序幕"><a href="#序幕" class="headerlink" title="序幕"></a>序幕</h3><p><strong>书接上回，上回说到</strong>，<a href="https://sirxs.cn/2023/05/27/page-id-3/">在Win10系统下利用Docker部署Gunicorn+Flask打造独立镜像</a>，今天我们来讲一讲利用DockerHub在Centos7.6环境下部署Nginx反向代理Gunicorn+Flask独立架构</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li><p>首先你需要有自己的云服务。我推荐白嫖</p><p><a href="https://free.aliyun.com/?spm=5176.14145661.J_3598540520.ace-channel-latest-activity-card.3eb418759BoljH">https://free.aliyun.com/?spm=5176.14145661.J_3598540520.ace-channel-latest-activity-card.3eb418759BoljH</a></p><p>阿里云白嫖服务器</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnUucG5n?x-oss-process=image/format,png" alt="docker"></p></li><li><p>其次你需要将本地项目<code>push</code>到DockerHub(仓库)</p><ul><li><p>首先激活账号，创建仓库</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnUxLnBuZw?x-oss-process=image/format,png" alt="docker"></p><p><strong>这里的创建仓库与Github类似</strong></p></li><li><p>填写仓库信息具体为仓库名称、描述以及是否公开或者私有。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnUyLnBuZw?x-oss-process=image/format,png" alt="docker"></p></li><li><p>创建成功之后，它就会出现在镜像列表中</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnUzLnBuZw?x-oss-process=image/format,png" alt="docker"></p></li></ul></li><li><p>此时我们需要对本地的镜像重命名，这里重命名为herosir&#x2F;flask_back。因为要与dockerhub上的仓库对应。如果名称不对应是无法将本地镜像push到线上仓库中。</p><pre class=" language-python"><code class="language-python">docker tag myflask herosir<span class="token operator">/</span>flask_back</code></pre></li><li><p>结果</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnU0LnBuZw?x-oss-process=image/format,png" alt="docker"></p></li><li><p>之后在命令行输入命令</p><pre class=" language-python"><code class="language-python">docker login</code></pre></li><li><p>用DockerHub的账号和密码登录</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnU1LnBuZw?x-oss-process=image/format,png" alt="docker"></p></li><li><p>登录成功之后，用命令把本地镜像push到DockerHub中</p><pre class=" language-python"><code class="language-python">docker push herosir<span class="token operator">/</span>flask_back</code></pre></li><li><p>注意这里的镜像名称必须和hub中的仓库名称一致，否则将会抛出错误。</p></li><li><p>上传成功后，就可以在DockerHub中看到它了，此时就能随意pull操作了</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnU2LnBuZw?x-oss-process=image/format,png" alt="docker"></p></li></ol><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol><li><p>前置操作已经完毕，此时，登录你的云服务器，这里以阿里云的Centos7.6为例子，进入服务器后安装Docker服务</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#升级yum</span>sudo yum update<span class="token comment" spellcheck="true">#卸载旧版本docker</span>sudo yum remove docker  docker<span class="token operator">-</span>common docker<span class="token operator">-</span>selinux docker<span class="token operator">-</span>engine<span class="token comment" spellcheck="true">#安装依赖</span>sudo yum install <span class="token operator">-</span>y yum<span class="token operator">-</span>utils device<span class="token operator">-</span>mapper<span class="token operator">-</span>persistent<span class="token operator">-</span>data lvm2<span class="token comment" spellcheck="true">#设置源</span>sudo yum<span class="token operator">-</span>config<span class="token operator">-</span>manager <span class="token operator">-</span><span class="token operator">-</span>add<span class="token operator">-</span>repo http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>reposudo yum makecache fast<span class="token comment" spellcheck="true">#安装docker</span>sudo yum install docker<span class="token operator">-</span>ce<span class="token comment" spellcheck="true">#启动服务</span>sudo systemctl start docker</code></pre></li><li><p>安装完成后输入 docker -v</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnU3LnBuZw?x-oss-process=image/format,png" alt="docker"></p><p><em>返回Docker版本号说明没有问题</em></p></li><li><p>拉取我们之前打包并且上传到hub的Flask镜像</p><pre class=" language-python"><code class="language-python">docker pull herosir<span class="token operator">/</span>flask_back</code></pre></li><li><p>下载成功后，会展示在镜像库里</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnU4LnBuZw?x-oss-process=image/format,png" alt="docker"></p></li><li><p>运行项目，这里我们可以采用后台守护进程的模式起服务</p><pre class=" language-python"><code class="language-python">sudo docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">5000</span><span class="token punctuation">:</span><span class="token number">5000</span> <span class="token operator">-</span><span class="token operator">-</span>name testflask herosir<span class="token operator">/</span>flask_back</code></pre></li><li><p>使用docker ps命令可以看到是否运行成功。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnU5LnBuZw?x-oss-process=image/format,png" alt="docker"></p></li><li><p>使用服务器的ip访问一下Flask服务，这里有个小坑，不论是腾讯云、阿里云还是百度云亦或是各种乱七八糟的云，都需要在安全组策略中开放你需要访问的端口，比如这里我用的阿里云。</p><ul><li><p>解决安群组策略</p></li><li><p>找到服务器的<code>配置规则</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnUxMC5wbmc?x-oss-process=image/format,png" alt="docker"></p></li><li><p><code>手动添加</code>下图信息</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnUxMS5wbmc?x-oss-process=image/format,png" alt="docker"></p></li></ul></li><li><p>设置完成之后通过服务器<code>公网IP</code>进行访问</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnUxMi5wbmc?x-oss-process=image/format,png" alt="docker"></p><p>OK，访问没有问题</p></li><li><p>接下来，我们同样利用Docker来安装Nginx服务</p><pre class=" language-python"><code class="language-python">docker pull nginx</code></pre></li><li><p>随后启动Nginx测试一下</p><pre class=" language-python"><code class="language-python">docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">80</span><span class="token punctuation">:</span><span class="token number">80</span> nginx</code></pre><ul><li><p>这里也需要设置安群组</p><p>操作同上，内容如下</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnUxMy5wbmc?x-oss-process=image/format,png" alt="docker"></p></li></ul></li><li><p>直接访问<code>公网IP</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnUxNC5wbmc?x-oss-process=image/format,png" alt="docker"></p></li><li><p>现在，我们将运行Nginx容器里的配置文件copy到宿主机里面</p><pre class=" language-python"><code class="language-python">docker cp 容器id<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>default<span class="token punctuation">.</span>conf <span class="token operator">/</span>root<span class="token operator">/</span>default<span class="token punctuation">.</span>conf</code></pre><p><strong>前面是容器的路径 后面是宿主机的路径</strong></p><p><em>容器id可以通过docker ps命令查看</em></p></li><li><p>复制出来之后，输入命令修改这个nginx配置</p><pre class=" language-python"><code class="language-python">vim <span class="token operator">/</span>root<span class="token operator">/</span>default<span class="token punctuation">.</span>conf</code></pre></li><li><p>将Gunicorn配置加到里面(<strong>更改</strong>)</p><pre class=" language-python"><code class="language-python">server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>    listen  <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">;</span>    server_name  localhost<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#charset koi8-r;</span>    <span class="token comment" spellcheck="true">#access_log  /var/log/nginx/host.access.log  main;</span>    location <span class="token operator">/</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        proxy_pass http<span class="token punctuation">:</span><span class="token operator">//</span>你的服务器公网IP<span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 这里是指向 gunicorn host 的服务地址</span>        proxy_set_header Host $host<span class="token punctuation">;</span>        proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For $proxy_add_x_forwarded_for<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token comment" spellcheck="true">#error_page  404              /404.html;</span>    <span class="token comment" spellcheck="true"># redirect server error pages to the static page /50x.html</span>    <span class="token comment" spellcheck="true">#</span>    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>    location <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        root   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token comment" spellcheck="true"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#location ~ \.php$ &amp;#123;</span>    <span class="token comment" spellcheck="true">#    proxy_pass   http://127.0.0.1;</span>    <span class="token comment" spellcheck="true">#&amp;#125;</span>    <span class="token comment" spellcheck="true"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#location ~ \.php$ &amp;#123;</span>    <span class="token comment" spellcheck="true">#    root           html;</span>    <span class="token comment" spellcheck="true">#    fastcgi_pass   127.0.0.1:9000;</span>    <span class="token comment" spellcheck="true">#    fastcgi_index  index.php;</span>    <span class="token comment" spellcheck="true">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>    <span class="token comment" spellcheck="true">#    include        fastcgi_params;</span>    <span class="token comment" spellcheck="true">#&amp;#125;</span>    <span class="token comment" spellcheck="true"># deny access to .htaccess files, if Apache's document root</span>    <span class="token comment" spellcheck="true"># concurs with nginx's one</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true">#location ~ /\.ht &amp;#123;</span>    <span class="token comment" spellcheck="true">#    deny  all;</span>    <span class="token comment" spellcheck="true">#&amp;#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre></li><li><p>修改完配置文件之后，关掉运行的nginx服务容器，并且删掉它</p><pre class=" language-python"><code class="language-python">docker stop 容器iddocker rm $<span class="token punctuation">(</span>docker ps <span class="token operator">-</span>a <span class="token operator">-</span>q<span class="token punctuation">)</span></code></pre></li><li><p>随后再次启动Nginx容器，不过这次和上次不同之处就是需要用到 -v 进行挂载了，挂载简单理解就是将宿主机的文件替换Docker容器内部的文件，达到修改的效果。</p><pre class=" language-python"><code class="language-python">docker run <span class="token operator">-</span><span class="token operator">-</span>name mynginx <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">80</span><span class="token punctuation">:</span><span class="token number">80</span> <span class="token operator">-</span>v <span class="token operator">/</span>root<span class="token operator">/</span>default<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>default<span class="token punctuation">.</span>conf nginx</code></pre><p><strong>这里-v参数也遵循冒号左侧为宿主机右侧为容器的原则。</strong></p></li><li><p>新启动成功后，访问服务器ip</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvYWxpeXVuYnUxNS5wbmc?x-oss-process=image/format,png" alt="docker"></p><p><strong>OK，部署完成</strong></p></li></ol><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>部署完成，轻松且愉快</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Python </tag>
            
            <tag> Gunicorn </tag>
            
            <tag> Flask </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Win10系统下利用Docker部署Gunicorn+Flask打造独立镜像</title>
      <link href="/2023/05/27/page-id-3/"/>
      <url>/2023/05/27/page-id-3/</url>
      
        <content type="html"><![CDATA[<h3 id="序幕"><a href="#序幕" class="headerlink" title="序幕"></a>序幕</h3><p><strong>书接上回，上回说到</strong>，<a href="https://sirxs.cn/2023/05/26/page-id-2/">Windows下安装docker</a>，今天我们来讲一讲将本地项目打包到docker</p><h4 id="什么是docker镜像"><a href="#什么是docker镜像" class="headerlink" title="什么是docker镜像"></a>什么是docker镜像</h4><p>Docker 包含三个基本概念，分别是镜像（Image）、容器（Container）和仓库（Repository）。镜像是 Docker 运行容器的前提，仓库是存放镜像的场所，可见镜像更是Docker的核心。</p><p>回到正题，Docker 镜像可以看作是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><ol><li><p>首先我们先看下项目的整体结构</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9rangucG5n?x-oss-process=image/format,png" alt="docker"></p></li><li><p><code>manage.py</code>是项目入口文件</p><p><strong>此项目地址：<a href="https://gitee.com/wangxs020202/flask/tree/wxs/">https://gitee.com/wangxs020202/flask/tree/wxs/</a></strong></p></li><li><p>接下里我们使用Gunicorn+gevent来运行Flask项目</p></li><li><p>安装相应的库</p><pre class=" language-python"><code class="language-python">pip install gunicorn gevent <span class="token operator">-</span><span class="token operator">-</span>user</code></pre></li><li><p>编辑项目目录下的gunicorn.conf.py</p><pre class=" language-python"><code class="language-python">workers <span class="token operator">=</span> <span class="token number">3</span>    <span class="token comment" spellcheck="true"># 进程数</span>worker_class <span class="token operator">=</span> <span class="token string">"gevent"</span>   <span class="token comment" spellcheck="true"># 异步模式</span>bind <span class="token operator">=</span> <span class="token string">"0.0.0.0:5000"</span></code></pre></li><li><p>由于Gunicorn并不支持Windows环境，所以只需要写好配置，不需要运行。</p></li><li><p>编辑项目目录下的requirements.txt文件，这里面都是我们项目所依赖的库</p><p>使用</p><pre class=" language-python"><code class="language-python">pip freeze <span class="token operator">></span> requirements<span class="token punctuation">.</span>txt</code></pre><p>导出<code>pip list</code>并生成<code>requirements.txt</code>文件</p><pre class=" language-python"><code class="language-python">alembic<span class="token operator">==</span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">1</span>aliyun<span class="token operator">-</span>python<span class="token operator">-</span>sdk<span class="token operator">-</span>core<span class="token operator">==</span><span class="token number">2.13</span><span class="token punctuation">.</span><span class="token number">15</span>autobahn<span class="token operator">==</span><span class="token number">20.4</span><span class="token punctuation">.</span><span class="token number">3</span>Automat<span class="token operator">==</span><span class="token number">0.8</span><span class="token punctuation">.</span><span class="token number">0</span>bcrypt<span class="token operator">==</span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">7</span>billiard<span class="token operator">==</span><span class="token number">3.6</span><span class="token punctuation">.</span><span class="token number">3.0</span>celery<span class="token operator">==</span><span class="token number">4.4</span><span class="token punctuation">.</span><span class="token number">2</span>certifi<span class="token operator">==</span><span class="token number">2019.9</span><span class="token punctuation">.</span><span class="token number">11</span>cffi<span class="token operator">==</span><span class="token number">1.12</span><span class="token punctuation">.</span><span class="token number">3</span>channels<span class="token operator">==</span><span class="token number">2.4</span><span class="token punctuation">.</span><span class="token number">0</span>chardet<span class="token operator">==</span><span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">4</span>Click<span class="token operator">==</span><span class="token number">7.0</span>constantly<span class="token operator">==</span><span class="token number">15.1</span><span class="token punctuation">.</span><span class="token number">0</span>cryptography<span class="token operator">==</span><span class="token number">2.8</span>daphne<span class="token operator">==</span><span class="token number">2.5</span><span class="token punctuation">.</span><span class="token number">0</span>dnspython<span class="token operator">==</span><span class="token number">1.16</span><span class="token punctuation">.</span><span class="token number">0</span>dwebsocket<span class="token operator">==</span><span class="token number">0.5</span><span class="token punctuation">.</span><span class="token number">12</span>eventlet<span class="token operator">==</span><span class="token number">0.25</span><span class="token punctuation">.</span><span class="token number">2</span>Flask<span class="token operator">==</span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">1</span>Flask<span class="token operator">-</span>Cors<span class="token operator">==</span><span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">8</span>Flask<span class="token operator">-</span>Migrate<span class="token operator">==</span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">1</span>Flask<span class="token operator">-</span>MySQLdb<span class="token operator">==</span><span class="token number">0.2</span><span class="token punctuation">.</span><span class="token number">0</span>Flask<span class="token operator">-</span>Script<span class="token operator">==</span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">6</span>Flask<span class="token operator">-</span>SocketIO<span class="token operator">==</span><span class="token number">4.3</span><span class="token punctuation">.</span><span class="token number">0</span>Flask<span class="token operator">-</span>SQLAlchemy<span class="token operator">==</span><span class="token number">2.4</span><span class="token punctuation">.</span><span class="token number">1</span>Flask<span class="token operator">-</span>Uploads<span class="token operator">==</span><span class="token number">0.2</span><span class="token punctuation">.</span><span class="token number">1</span>gevent<span class="token operator">==</span><span class="token number">1.4</span><span class="token punctuation">.</span><span class="token number">0</span>greenlet<span class="token operator">==</span><span class="token number">0.4</span><span class="token punctuation">.</span><span class="token number">15</span>gunicorn<span class="token operator">==</span><span class="token number">20.0</span><span class="token punctuation">.</span><span class="token number">4</span>html5lib<span class="token operator">==</span><span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">1</span>hyperlink<span class="token operator">==</span><span class="token number">19.0</span><span class="token punctuation">.</span><span class="token number">0</span>idna<span class="token operator">==</span><span class="token number">2.8</span>importlib<span class="token operator">-</span>metadata<span class="token operator">==</span><span class="token number">1.6</span><span class="token punctuation">.</span><span class="token number">0</span>incremental<span class="token operator">==</span><span class="token number">17.5</span><span class="token punctuation">.</span><span class="token number">0</span>itsdangerous<span class="token operator">==</span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">0</span>jmespath<span class="token operator">==</span><span class="token number">0.9</span><span class="token punctuation">.</span><span class="token number">5</span>jsonify<span class="token operator">==</span><span class="token number">0.5</span>monotonic<span class="token operator">==</span><span class="token number">1.5</span>mysqlclient<span class="token operator">==</span><span class="token number">1.4</span><span class="token punctuation">.</span><span class="token number">4</span>npm<span class="token operator">==</span><span class="token number">0.1</span><span class="token punctuation">.</span><span class="token number">1</span>numpy<span class="token operator">==</span><span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">1</span>opencv<span class="token operator">-</span>contrib<span class="token operator">-</span>python<span class="token operator">==</span><span class="token number">4.1</span><span class="token punctuation">.</span><span class="token number">2.30</span>opencv<span class="token operator">-</span>python<span class="token operator">==</span><span class="token number">4.1</span><span class="token punctuation">.</span><span class="token number">2.30</span>optional<span class="token operator">-</span>django<span class="token operator">==</span><span class="token number">0.1</span><span class="token punctuation">.</span><span class="token number">0</span>paramiko<span class="token operator">==</span><span class="token number">2.7</span><span class="token punctuation">.</span><span class="token number">1</span>paypalrestsdk<span class="token operator">==</span><span class="token number">1.13</span><span class="token punctuation">.</span><span class="token number">1</span>pbr<span class="token operator">==</span><span class="token number">5.4</span><span class="token punctuation">.</span><span class="token number">3</span>pdfminer3k<span class="token operator">==</span><span class="token number">1.3</span><span class="token punctuation">.</span><span class="token number">4</span>Pillow<span class="token operator">==</span><span class="token number">6.2</span><span class="token punctuation">.</span><span class="token number">1</span>ply<span class="token operator">==</span><span class="token number">3.11</span>pyasn1<span class="token operator">==</span><span class="token number">0.4</span><span class="token punctuation">.</span><span class="token number">8</span>pyasn1<span class="token operator">-</span>modules<span class="token operator">==</span><span class="token number">0.2</span><span class="token punctuation">.</span><span class="token number">8</span>pycodestyle<span class="token operator">==</span><span class="token number">2.6</span><span class="token punctuation">.</span><span class="token number">0</span>pycparser<span class="token operator">==</span><span class="token number">2.19</span>pycryptodome<span class="token operator">==</span><span class="token number">3.9</span><span class="token punctuation">.</span><span class="token number">7</span>pycryptodomex<span class="token operator">==</span><span class="token number">3.9</span><span class="token punctuation">.</span><span class="token number">4</span>PyHamcrest<span class="token operator">==</span><span class="token number">1.9</span><span class="token punctuation">.</span><span class="token number">0</span>PyJWT<span class="token operator">==</span><span class="token number">1.7</span><span class="token punctuation">.</span><span class="token number">1</span>pymongo<span class="token operator">==</span><span class="token number">3.10</span><span class="token punctuation">.</span><span class="token number">1</span>PyMySQL<span class="token operator">==</span><span class="token number">0.9</span><span class="token punctuation">.</span><span class="token number">3</span>PyNaCl<span class="token operator">==</span><span class="token number">1.3</span><span class="token punctuation">.</span><span class="token number">0</span>pyOpenSSL<span class="token operator">==</span><span class="token number">19.1</span><span class="token punctuation">.</span><span class="token number">0</span>pysnowflake<span class="token operator">==</span><span class="token number">0.1</span><span class="token punctuation">.</span><span class="token number">3</span>python<span class="token operator">-</span>alipay<span class="token operator">-</span>sdk<span class="token operator">==</span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">1</span>python<span class="token operator">-</span>dateutil<span class="token operator">==</span><span class="token number">2.8</span><span class="token punctuation">.</span><span class="token number">0</span>python<span class="token operator">-</span>docx<span class="token operator">==</span><span class="token number">0.8</span><span class="token punctuation">.</span><span class="token number">10</span>python<span class="token operator">-</span>editor<span class="token operator">==</span><span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">4</span>python<span class="token operator">-</span>engineio<span class="token operator">==</span><span class="token number">3.13</span><span class="token punctuation">.</span><span class="token number">0</span>python<span class="token operator">-</span>socketio<span class="token operator">==</span><span class="token number">4.6</span><span class="token punctuation">.</span><span class="token number">0</span>qiniu<span class="token operator">==</span><span class="token number">7.2</span><span class="token punctuation">.</span><span class="token number">8</span>redis<span class="token operator">==</span><span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">11</span>requests<span class="token operator">==</span><span class="token number">2.22</span><span class="token punctuation">.</span><span class="token number">0</span>selenium<span class="token operator">==</span><span class="token number">3.141</span><span class="token punctuation">.</span><span class="token number">0</span>service<span class="token operator">-</span>identity<span class="token operator">==</span><span class="token number">18.1</span><span class="token punctuation">.</span><span class="token number">0</span>soupsieve<span class="token operator">==</span><span class="token number">1.9</span><span class="token punctuation">.</span><span class="token number">5</span>SQLAlchemy<span class="token operator">==</span><span class="token number">1.3</span><span class="token punctuation">.</span><span class="token number">10</span>sqlparse<span class="token operator">==</span><span class="token number">0.3</span><span class="token punctuation">.</span><span class="token number">1</span>stevedore<span class="token operator">==</span><span class="token number">1.31</span><span class="token punctuation">.</span><span class="token number">0</span>tornado<span class="token operator">==</span><span class="token number">6.0</span><span class="token punctuation">.</span><span class="token number">4</span>Twisted<span class="token operator">==</span><span class="token number">20.3</span><span class="token punctuation">.</span><span class="token number">0</span>txaio<span class="token operator">==</span><span class="token number">20.4</span><span class="token punctuation">.</span><span class="token number">1</span>upyun<span class="token operator">==</span><span class="token number">2.5</span><span class="token punctuation">.</span><span class="token number">5</span>urllib3<span class="token operator">==</span><span class="token number">1.25</span><span class="token punctuation">.</span><span class="token number">6</span>vine<span class="token operator">==</span><span class="token number">1.3</span><span class="token punctuation">.</span><span class="token number">0</span>virtualenv<span class="token operator">==</span><span class="token number">16.7</span><span class="token punctuation">.</span><span class="token number">7</span>virtualenv<span class="token operator">-</span>clone<span class="token operator">==</span><span class="token number">0.5</span><span class="token punctuation">.</span><span class="token number">3</span>virtualenvwrapper<span class="token operator">==</span><span class="token number">4.8</span><span class="token punctuation">.</span><span class="token number">4</span>virtualenvwrapper<span class="token operator">-</span>win<span class="token operator">==</span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">5</span>webencodings<span class="token operator">==</span><span class="token number">0.5</span><span class="token punctuation">.</span><span class="token number">1</span>Werkzeug<span class="token operator">==</span><span class="token number">0.16</span><span class="token punctuation">.</span><span class="token number">0</span>Whoosh<span class="token operator">==</span><span class="token number">2.7</span><span class="token punctuation">.</span><span class="token number">4</span>yapf<span class="token operator">==</span><span class="token number">0.30</span><span class="token punctuation">.</span><span class="token number">0</span>zipp<span class="token operator">==</span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">0</span>zope<span class="token punctuation">.</span>interface<span class="token operator">==</span><span class="token number">4.7</span><span class="token punctuation">.</span><span class="token number">1</span></code></pre><p><strong>由于只需要本项目的包，大家可以酌情删除多余的包</strong></p></li><li><p>随后在项目目录下创建一个 Dockerfile 文件，这个文件可以理解为打包镜像的脚本，你需要这个镜像做什么，就把任务写到脚本中，Docker通过执行这个脚本来打包镜像</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM python:3.6WORKDIR /Project/flask_backCOPY requirements.txt ./RUN pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simpleCOPY . .ENV LANG C.UTF-8CMD ["gunicorn", "manage:app", "-c", "./gunicorn.conf.py"]</code></pre></li><li><p>可以看到，我们项目的镜像首先基于python3.6这个基础镜像，然后声明项目目录在&#x2F;Project&#x2F;flask_back中，拷贝依赖表，之后安装相应的依赖，这里在安装过程中我们指定了国内的源用来提高打包速度，最后利用gunicorn运行项目，值得一提的是，ENV LANG C.UTF-8是为了声明Docker内部环境中的编码，防止中文乱码问题。</p></li><li><p>最后我们就可以愉快的打包整个项目了，在项目根目录下执行</p><pre class=" language-python"><code class="language-python">docker build <span class="token operator">-</span>t <span class="token string">'flask_back'</span> <span class="token punctuation">.</span></code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9rangyLnBuZw?x-oss-process=image/format,png" alt="docker"></p><p><strong>这里一定要指定Docker的下载源，否则速度会非常缓慢，打包好的镜像文件大概有1g左右。</strong></p></li><li><p>下载结束之后，可以看到myflask这个镜像已经静静躺在镜像库中了，运行</p><pre class=" language-python"><code class="language-python">docker images</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9rangzLnBuZw?x-oss-process=image/format,png" alt="docker"></p><p>我们可以看到<code>flask_back</code>以及打包成功</p></li><li><p>然后我们就可以利用这个镜像来通过容器跑Flask项目了，运行命令</p><pre class=" language-python"><code class="language-python">docker run <span class="token operator">-</span>it <span class="token operator">-</span><span class="token operator">-</span>rm <span class="token operator">-</span>p <span class="token number">5000</span><span class="token punctuation">:</span><span class="token number">5000</span> flask_back</code></pre></li><li><p>我们可以看到docker内部的端口5000映射到宿主机的5000端口上</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9rang0LnBuZw?x-oss-process=image/format,png" alt="docker"></p></li><li><p>通过网址访问一下，这里注意一点，就是Windows系统下，访问Docker容器需要通过分配的ip来访问，而不是我们常用的localhost。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9rang1LnBuZw?x-oss-process=image/format,png" alt="docker"></p></li><li><p>接下来我们启动本地<code>flask</code>项目与<code>docker</code>内部镜像对比</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9rang3LnBuZw?x-oss-process=image/format,png" alt="docker"></p></li><li><p>对比</p><ul><li><p>docker</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9rang2LnBuZw?x-oss-process=image/format,png" alt="docker"></p></li><li><p>本地</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9rang4LnBuZw?x-oss-process=image/format,png" alt="docker"></p></li></ul></li></ol><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p><strong>可以看到启动docker与本地项目并不会影响</strong></p><p>到这里我们的 Docker+Flask + Gunicorn就部署完毕了，将这个镜像上传Dockerhub仓库，在任何时间、任何地点、任何系统上，只要连着网、只要我们想，就都可以在短短1分钟之内部署好我们的项目，这就是Docker技术对开发人员最好的馈赠。</p><p>下期<code>利用DockerHub在Centos7.7环境下部署Nginx反向代理Gunicorn+Flask独立架构</code></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Python </tag>
            
            <tag> Gunicorn </tag>
            
            <tag> Flask </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Windows10（家庭版）上快乐的使用Docker</title>
      <link href="/2023/05/26/page-id-2/"/>
      <url>/2023/05/26/page-id-2/</url>
      
        <content type="html"><![CDATA[<h3 id="序幕"><a href="#序幕" class="headerlink" title="序幕"></a>序幕</h3><p><a href="https://baike.so.com/doc/8850626-9175652.html">Docker</a> 是一个<a href="https://baike.so.com/doc/4975645-27166090.html">开源</a>的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html">Go 语言</a>   并遵从 Apache2.0 协议开源，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 <a href="https://baike.so.com/doc/5349227-5584683.html">Linux</a>或Windows 机器上，也可以实现<a href="https://baike.so.com/doc/2617474-2763805.html">虚拟化</a>。容器是完全使用<a href="https://baike.so.com/doc/5888674-6101559.html">沙箱</a>机制，相互之间不会有任何接口。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>Web 应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li><li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p><h3 id="1、快速，一致地交付您的应用程序"><a href="#1、快速，一致地交付您的应用程序" class="headerlink" title="1、快速，一致地交付您的应用程序"></a>1、快速，一致地交付您的应用程序</h3><p>Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。</p><p>容器非常适合持续集成和持续交付（CI &#x2F; CD）工作流程，请考虑以下示例方案：</p><ul><li>您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。</li><li>他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。</li><li>当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。</li><li>测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。</li></ul><h3 id="2、响应式部署和扩展"><a href="#2、响应式部署和扩展" class="headerlink" title="2、响应式部署和扩展"></a>2、响应式部署和扩展</h3><p>Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</p><p>Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</p><h3 id="3、在同一硬件上运行更多工作负载"><a href="#3、在同一硬件上运行更多工作负载" class="headerlink" title="3、在同一硬件上运行更多工作负载"></a>3、在同一硬件上运行更多工作负载</h3><p>Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>首先我们需要下载<code>Git</code>，Git大家应该都有，非常好用的一款<code>开源</code>的分布式版本控制系统，如果没有我们后期会出安装教程。</p></li><li><p>紧接着下载<code>Docker</code>安装包，这个我已经下载好，并传上了百度网盘。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyMS5wbmc?x-oss-process=image/format,png" alt="docker"></p><p><strong>大家可以拉下：链接: <a href="https://pan.baidu.com/s/1TC8YLrUsS5JhlmOih8Cl5A">https://pan.baidu.com/s/1TC8YLrUsS5JhlmOih8Cl5A</a> 提取码: zph1</strong></p></li><li><p>接下来打开压缩包，点击安装包</p><p><strong>切记安装的时候一定要断掉网络</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyMi5wbmc?x-oss-process=image/format,png" alt="docker"></p></li><li><p>进入安装页面，取消勾选项，点击<code>Next</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyMy5wbmc?x-oss-process=image/format,png" alt="docker"></p></li><li><p>选择安装路径，点击<code>Next</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyNC5wbmc?x-oss-process=image/format,png" alt="docker"></p></li><li><p>取消勾选项</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyNS5wbmc?x-oss-process=image/format,png" alt="docker"></p></li><li><p>直接点击<code>Next</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyNi5wbmc?x-oss-process=image/format,png" alt="docker"></p></li><li><p>点击<code>Install</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyNy5wbmc?x-oss-process=image/format,png" alt="docker"></p></li><li><p>安装成功，会给你安装两个软件</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyOC5wbmc?x-oss-process=image/format,png" alt="docker"></p><p><strong>Oracle VM VirtualBox 是一个虚拟机，不会影响使用，但是必须得</strong></p></li><li><p>之后进入你的<code>Git</code>bin目录下</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyOS5wbmc?x-oss-process=image/format,png" alt="docker"></p><p><strong>复制路径</strong></p></li><li><p>鼠标右键<code>Docker Quickstart Terminal</code>，点击<code>属性</code>,<code>图一</code>,将复制的路径更换到此地方<code>图二</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyMTAucG5n?x-oss-process=image/format,png" alt="docker"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyMTEucG5n?x-oss-process=image/format,png" alt="docker"></p></li><li><p>之后解压<code>DockerToolbox-18.01.0-ce.exe</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyMTIucG5n?x-oss-process=image/format,png" alt="docker"></p></li><li><p>将解压下来的文件放到下面的路径中</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyMTMucG5n?x-oss-process=image/format,png" alt="docker"></p></li><li><p>之后进入<code>Docker</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyMTQucG5n?x-oss-process=image/format,png" alt="docker"></p><p><strong>第一次加载是很慢的</strong></p></li><li><p>出现这个小鲸鱼说明启动成功了</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyMTUucG5n?x-oss-process=image/format,png" alt="docker"></p></li><li><p>进入虚拟机，可以看见一个任务正在运行</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93YW5neHMwMjAyMDIuZ2l0ZWUuaW8vaW1hZ2VzL25vdGUvZG9ja2VyMTYucG5n?x-oss-process=image/format,png" alt="docker"></p></li></ol><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>docker安装非常简单的，前面断网的原因是他在运行时会自动下载<code>DockerToolbox-18.01.0-ce.exe</code>这个文件，这个文件非常大的，所以直接断网。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker Toolbox </tag>
            
            <tag> Windows10 </tag>
            
            <tag> 家庭版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Channels在Django中释放WebSocket的能力</title>
      <link href="/2023/05/19/page-id-1/"/>
      <url>/2023/05/19/page-id-1/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>随着Web应用程序需求的增加，越来越多的开发人员转向实时（realtime）Web技术，其中最普遍的技术是WebSocket。然而，在使用Django进行Web开发时，处理实时和异步请求并不是一件容易的事情。<br>为了克服这个问题，Django引入了Channels，这是一个使Django应用程序能够处理异步和实时Web请求（包括WebSockets）的扩展库。</p><p>在本文中，我们将探讨如何使用Django Channels来开发基于WebSocket的应用程序，并将重点介绍Channels如何释放WebSocket的能力。</p><p><code>作者这里使用的Django版本是4.1.7</code></p><h3 id="二、Channels简介"><a href="#二、Channels简介" class="headerlink" title="二、Channels简介"></a>二、Channels简介</h3><p>Channels 是一个采用 Django 并将其能力扩展到 HTTP 之外的项目——处理 WebSocket、聊天协议、IoT 协议等。它建立在称为ASGI 的Python<br>规范之上。<br>Channels 建立在 Django 的原生 ASGI 支持之上。虽然 Django 仍然处理传统的 HTTP，但 Channels 让您可以选择以同步或异步方式处理其他连接。</p><p>Channels 使 Django 能够处理更多类型的连接，包括 WebSocket、HTTP&#x2F;2 和 ASGI，而不仅仅是 HTTP。它还允许您在 Django<br>中使用异步代码，而不是仅限于同步代码。这使您可以使用诸如 asyncio 和 Twisted 之类的库，这些库可以在单个进程中处理更多连接。</p><p><strong>tips</strong>:<br>这里我们需要redis作为Channels的后端，所以需要安装redis，作者这里直接使用docker安装redis，具体安装方法可以参考<a href="https://www.runoob.com/docker/docker-install-redis.html">这里</a>。</p><h3 id="三、Channels的使用"><a href="#三、Channels的使用" class="headerlink" title="三、Channels的使用"></a>三、Channels的使用</h3><h4 id="3-1-安装django-channels和其依赖库"><a href="#3-1-安装django-channels和其依赖库" class="headerlink" title="3.1 安装django-channels和其依赖库"></a>3.1 安装django-channels和其依赖库</h4><pre class=" language-shell"><code class="language-shell">pip install channelspip install channels-redis</code></pre><h4 id="3-2-配置settings-py"><a href="#3-2-配置settings-py" class="headerlink" title="3.2 配置settings.py"></a>3.2 配置settings.py</h4><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token string">'channels'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># myapp是存放asgi.py的应用名</span>    ASGI_APPLICATION <span class="token operator">=</span> <span class="token string">'myproject.asgi.application'</span>        CHANNEL_LAYERS <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">"BACKEND"</span><span class="token punctuation">:</span> <span class="token string">"channels_redis.core.RedisChannelLayer"</span><span class="token punctuation">,</span>            <span class="token string">"CONFIG"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"hosts"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>这里将Redis作为Channel layer的后端。可以使用其他后端，比如In-Memory Layer或者asgi-redis。这里的application属性是我们自己编写的ASGI应用程序的位置。</p><h4 id="3-3-在项目的app中新建一个asgi-py文件，编写ASGI应用程序（有的话可以直接修改）"><a href="#3-3-在项目的app中新建一个asgi-py文件，编写ASGI应用程序（有的话可以直接修改）" class="headerlink" title="3.3 在项目的app中新建一个asgi.py文件，编写ASGI应用程序（有的话可以直接修改）"></a>3.3 在项目的app中新建一个asgi.py文件，编写ASGI应用程序（有的话可以直接修改）</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>asgi <span class="token keyword">import</span> get_asgi_application<span class="token keyword">from</span> channels<span class="token punctuation">.</span>routing <span class="token keyword">import</span> ProtocolTypeRouter<span class="token punctuation">,</span> URLRouter<span class="token keyword">from</span> channels<span class="token punctuation">.</span>auth <span class="token keyword">import</span> AuthMiddlewareStack<span class="token keyword">from</span> upp<span class="token punctuation">.</span>routing <span class="token keyword">import</span> websocket_urlpatternsos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'myproject.settings'</span><span class="token punctuation">)</span>application <span class="token operator">=</span> ProtocolTypeRouter<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"http"</span><span class="token punctuation">:</span> get_asgi_application<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"websocket"</span><span class="token punctuation">:</span> AuthMiddlewareStack<span class="token punctuation">(</span>        URLRouter<span class="token punctuation">(</span>            websocket_urlpatterns        <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span></code></pre><p>这里我们使用get_asgi_application()<br>函数获取Django的默认ASGI应用程序，同时使用channels.routing模块中的ProtocolTypeRouter来指定HTTP请求和Websocket请求的处理方式。URLRouter将Websocket请求路由到相应的Consumer中。</p><h4 id="3-4-在Django项目中新建一个routing-py文件，编写WebSocket路由"><a href="#3-4-在Django项目中新建一个routing-py文件，编写WebSocket路由" class="headerlink" title="3.4 在Django项目中新建一个routing.py文件，编写WebSocket路由"></a>3.4 在Django项目中新建一个routing.py文件，编写WebSocket路由</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> consumerswebsocket_urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'ws/chat/'</span><span class="token punctuation">,</span> consumers<span class="token punctuation">.</span>ChatConsumer<span class="token punctuation">.</span>as_asgi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>这里的写法与作用和Django的路由是一样的，只不过这里的路由是用来处理WebSocket请求的。</p><h4 id="3-5-在Django项目中新建一个consumers-py文件，编写Websocket-Consumer（聊天室）"><a href="#3-5-在Django项目中新建一个consumers-py文件，编写Websocket-Consumer（聊天室）" class="headerlink" title="3.5 在Django项目中新建一个consumers.py文件，编写Websocket Consumer（聊天室）"></a>3.5 在Django项目中新建一个consumers.py文件，编写Websocket Consumer（聊天室）</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">from</span> channels<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>websocket <span class="token keyword">import</span> AsyncWebsocketConsumer<span class="token keyword">class</span> <span class="token class-name">ChatConsumer</span><span class="token punctuation">(</span>AsyncWebsocketConsumer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> self<span class="token punctuation">.</span>channel_layer<span class="token punctuation">.</span>group_add<span class="token punctuation">(</span>            <span class="token string">"chat"</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>channel_name<span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token keyword">await</span> self<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">disconnect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> close_code<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> self<span class="token punctuation">.</span>channel_layer<span class="token punctuation">.</span>group_discard<span class="token punctuation">(</span>            <span class="token string">"chat"</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>channel_name<span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">receive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>text_data<span class="token punctuation">)</span>        message <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>        <span class="token keyword">await</span> self<span class="token punctuation">.</span>channel_layer<span class="token punctuation">.</span>group_send<span class="token punctuation">(</span>            <span class="token string">"chat"</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"chat.message"</span><span class="token punctuation">,</span>                <span class="token string">"message"</span><span class="token punctuation">:</span> message<span class="token punctuation">,</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">chat_message</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> event<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>        <span class="token keyword">await</span> self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>text_data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> message<span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;))</span></code></pre><p>在这里，我们定义了一个名为ChatConsumer的Consumer类，处理来自“chat”频道的Websocket消息。<br>当一个用户连接到ChatConsumer时，我们将其添加到“chat”组中。当一个用户断开连接时，我们将其从“chat”组中删除。当一个用户发送一个消息时，我们将其发送到“chat”组中的所有用户。</p><h4 id="3-6-在Django项目中新建一个consumers2-py文件，编写Websocket-Consumer（定时任务）"><a href="#3-6-在Django项目中新建一个consumers2-py文件，编写Websocket-Consumer（定时任务）" class="headerlink" title="3.6 在Django项目中新建一个consumers2.py文件，编写Websocket Consumer（定时任务）"></a>3.6 在Django项目中新建一个consumers2.py文件，编写Websocket Consumer（定时任务）</h4><p>在<code>3.5</code>中我们实现了一下类似聊天室的功能，这里我们实现一个定时任务的功能，每隔一秒向客户端发送一个消息。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token punctuation">,</span> json<span class="token keyword">from</span> channels<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>websocket <span class="token keyword">import</span> AsyncWebsocketConsumer<span class="token keyword">from</span> channels<span class="token punctuation">.</span>db <span class="token keyword">import</span> database_sync_to_async<span class="token comment" spellcheck="true"># 定义一个异步函数，用于定时发送单个装机状态软件以及软件安装状态</span><span class="token keyword">class</span> <span class="token class-name">AttimeConsumer</span><span class="token punctuation">(</span>AsyncWebsocketConsumer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 接收连接</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 将当前连接加入到group_name组中</span>        <span class="token keyword">await</span> self<span class="token punctuation">.</span>channel_layer<span class="token punctuation">.</span>group_add<span class="token punctuation">(</span><span class="token string">"group_name"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>channel_name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 接受连接</span>        <span class="token keyword">await</span> self<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建一个任务，用于定时发送消息</span>        asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>self<span class="token punctuation">.</span>send_messages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 断开连接</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">disconnect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> close_code<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 将当前连接从group_name组中移除</span>        <span class="token keyword">await</span> self<span class="token punctuation">.</span>channel_layer<span class="token punctuation">.</span>group_discard<span class="token punctuation">(</span><span class="token string">"group_name"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>channel_name<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"断开连接"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 接收客户端发送的消息</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">receive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 发送消息</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">send_message</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>text_data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>event<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">send_messages</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 所有装机状态以及软件安装百分比</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 定时发送消息</span>            <span class="token keyword">await</span> self<span class="token punctuation">.</span>channel_layer<span class="token punctuation">.</span>group_send<span class="token punctuation">(</span><span class="token string">"group_name"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"type": "send.message", "message": 'hello'&amp;#125;)</span></code></pre><p>当一个用户连接到AttimeConsumer时，我们将其添加到“group_name”组中。每隔一秒，我们将一个消息发送到“group_name”组中的所有用户。<br>当然<code>asyncio.create_task(self.send_messages())</code>定时任务可以放在<code>receive</code>中，这样就可以根据客户端发送的消息来决定是否开启定时任务。<br><strong>同样将<code>AttimeConsumer</code>注册到routing中</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> consumerswebsocket_urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'ws/chat/'</span><span class="token punctuation">,</span> consumers<span class="token punctuation">.</span>ChatConsumer<span class="token punctuation">.</span>as_asgi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'ws/attime/'</span><span class="token punctuation">,</span> consumers2<span class="token punctuation">.</span>AttimeConsumer<span class="token punctuation">.</span>as_asgi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h4 id="3-7-启动Django项目"><a href="#3-7-启动Django项目" class="headerlink" title="3.7 启动Django项目"></a>3.7 启动Django项目</h4><p>这里我们使用到了ASGI服务器，所以不能使用Django自带的服务器，需要使用到<code>uvicorn</code>，安装<code>uvicorn</code>：</p><pre class=" language-shell"><code class="language-shell">pip install uvicorn[standard]</code></pre><p><code>uvicorn</code>的具体用法可以参考<a href="https://www.uvicorn.org/">官方文档</a>，这里我们使用<code>uvicorn</code>启动Django项目：</p><pre class=" language-shell"><code class="language-shell">uvicorn myproject.asgi:application --port 8000</code></pre><p>这里的<code>myproject.asgi:application</code>就是我们在<code>3.2</code>中配置的<code>ASGI_APPLICATION</code>，<code>--port 8000</code>指定端口号为8000。</p><h3 id="四、效果展示"><a href="#四、效果展示" class="headerlink" title="四、效果展示"></a>四、效果展示</h3><p>这里我们使用<code>ApiFox</code>来模拟前端发送消息，</p><p>启动界面：<br><img src="https://wangxs020202.gitee.io/pbad/new/django-channels1.png" alt="django-channels"></p><p>ApiFox界面：<br><img src="https://wangxs020202.gitee.io/pbad/new/django-channels.gif" alt="django-channels"></p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>相对于Flask-SocketIO，Django-Channels的使用更加简单，而且支持异步，性能更好，但是Django-Channels的文档相对于Flask-SocketIO的文档来说比较少，所以在使用的过程中可能会遇到一些问题，这里推荐一个Django-Channels的中文文档：<a href="https://channels.readthedocs.io/en/stable/">Django Channels 中文文档</a><br>，这里面有很多例子，可以参考。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Channels </tag>
            
            <tag> WebSocket </tag>
            
            <tag> ASGI </tag>
            
            <tag> 聊天室 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大化服务器性能：在Ubuntu 22.04上逐步指南安装Anaconda</title>
      <link href="/2023/04/26/ubuntu-an-zhuang-anaconda/"/>
      <url>/2023/04/26/ubuntu-an-zhuang-anaconda/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>Anaconda是一个用于科学计算的Python发行版，支持 Linux、Mac、Windows系统，提供了包管理与环境管理的功能，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。</p><p>Anaconda利用工具conda来进行包和环境管理。conda是一个开源包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。它在Anaconda发行版中默认包含，但也可以通过Miniconda独立安装。</p><p>本文将指导您在Ubuntu 22.04上安装Anaconda，以最大化服务器性能。</p><h3 id="二、下载Anaconda"><a href="#二、下载Anaconda" class="headerlink" title="二、下载Anaconda"></a>二、下载Anaconda</h3><p>Anaconda的下载地址：<a href="https://www.anaconda.com/products/individual">官网</a>，<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">清华大学开源软件镜像站</a>。</p><h3 id="三、安装Anaconda"><a href="#三、安装Anaconda" class="headerlink" title="三、安装Anaconda"></a>三、安装Anaconda</h3><p>这里我们继续使用上期的Ubuntu 22.04系统，如果您还没有安装，请参考：<a href="https://sirxs.cn/2023/04/25/ubuntu22-04-server-an-zhuang/">Ubuntu 22.04 Server 安装实录</a>。</p><h4 id="3-1-传输文件"><a href="#3-1-传输文件" class="headerlink" title="3.1 传输文件"></a>3.1 传输文件</h4><p>将下载好的Anaconda文件传输到服务器上，这里我们使用Termius，如果您还没有安装，也可使用Xftp等工具。</p><p><img src="https://wangxs020202.gitee.io/pbad/new/anaconda_2023-04-26_10-39-37.png" alt="anaconda_2023-04-26_10-39-37"></p><h4 id="3-2-安装Anaconda"><a href="#3-2-安装Anaconda" class="headerlink" title="3.2 安装Anaconda"></a>3.2 安装Anaconda</h4><p>在服务器上，进入Anaconda文件所在目录，执行以下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">bash</span> Anaconda3-5.3.1-Linux-x86_64.sh -u</code></pre><p><img src="https://wangxs020202.gitee.io/pbad/new/anaconda_2023-04-26_10-19-46.png" alt="anaconda_2023-04-26_10-19-46"></p><p>-u 参数表示使用默认安装路径，如果不加-u参数，需要手动输入安装路径。</p><p><code>注意</code>：这个过程中可能会出现以下错误</p><pre class=" language-text"><code class="language-text">Anaconda3-5.3.1-Linux-x86_64.sh: line 353: bunzip2: command not found</code></pre><p>这是因为服务器上没有安装bzip2，执行以下命令安装即可：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">bzip2</span></code></pre><p><img src="https://wangxs020202.gitee.io/pbad/new/anaconda_2023-04-26_10-19-14.png" alt="anaconda_2023-04-26_10-19-14"></p><p>license协议，<code>yes</code>继续。</p><p><img src="https://wangxs020202.gitee.io/pbad/new/anaconda_2023-04-26_10-20-19.png" alt="anaconda_2023-04-26_10-20-19"></p><p>安装路径，按<code>Enter</code>继续。</p><p><img src="https://wangxs020202.gitee.io/pbad/new/anaconda_2023-04-26_10-20-37.png" alt="anaconda_2023-04-26_10-20-37"></p><p>添加环境变量，<code>yes</code>继续。</p><p><img src="https://wangxs020202.gitee.io/pbad/new/anaconda_2023-04-26_10-21-09.png" alt="anaconda_2023-04-26_10-21-09"></p><p>安装Microsoft VSCode，<code>no</code>继续。</p><p><img src="https://wangxs020202.gitee.io/pbad/new/anaconda_2023-04-26_10-21-29.png" alt="anaconda_2023-04-26_10-21-29"></p><p>安装完成。</p><p>下面是整体的安装过程：</p><p><img src="https://wangxs020202.gitee.io/pbad/new/anaconda_2023-04-26_10-22-00.gif" alt="anaconda_2023-04-26_10-22-00"></p><h3 id="四、创建虚拟环境"><a href="#四、创建虚拟环境" class="headerlink" title="四、创建虚拟环境"></a>四、创建虚拟环境</h3><h4 id="4-1-查看本地虚拟环境"><a href="#4-1-查看本地虚拟环境" class="headerlink" title="4.1 查看本地虚拟环境"></a>4.1 查看本地虚拟环境</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrcconda <span class="token function">env</span> list</code></pre><p><img src="https://wangxs020202.gitee.io/pbad/new/anaconda_2023-04-26_10-21-46.png" alt="anaconda_2023-04-26_10-21-46"></p><h4 id="4-2-创建虚拟环境"><a href="#4-2-创建虚拟环境" class="headerlink" title="4.2 创建虚拟环境"></a>4.2 创建虚拟环境</h4><pre class=" language-bash"><code class="language-bash">conda create -n mDjango python<span class="token operator">=</span>3.10 -y</code></pre><p><img src="https://wangxs020202.gitee.io/pbad/new/anaconda_2023-04-26_10-25-57.png" alt="anaconda_2023-04-26_10-25-57"><br><img src="https://wangxs020202.gitee.io/pbad/new/anaconda_2023-04-26_10-28-31.png" alt="anaconda_2023-04-26_10-28-31"></p><h4 id="4-3-激活虚拟环境"><a href="#4-3-激活虚拟环境" class="headerlink" title="4.3 激活虚拟环境"></a>4.3 激活虚拟环境</h4><pre class=" language-bash"><code class="language-bash">conda activate mDjango</code></pre><h3 id="四、anaconda常用命令"><a href="#四、anaconda常用命令" class="headerlink" title="四、anaconda常用命令"></a>四、anaconda常用命令</h3><pre class=" language-bash"><code class="language-bash">conda --version <span class="token comment" spellcheck="true"># 查看版本</span>conda update conda <span class="token comment" spellcheck="true"># 更新conda</span>conda update anaconda <span class="token comment" spellcheck="true"># 更新anaconda</span>conda update python <span class="token comment" spellcheck="true"># 更新python</span>conda update --all <span class="token comment" spellcheck="true"># 更新所有包</span>conda <span class="token function">env</span> list <span class="token comment" spellcheck="true"># 查看所有虚拟环境</span>conda create -n 虚拟环境名称 python<span class="token operator">=</span>版本号 <span class="token comment" spellcheck="true"># 创建虚拟环境</span>conda activate 虚拟环境名称 <span class="token comment" spellcheck="true"># 激活虚拟环境</span>conda deactivate <span class="token comment" spellcheck="true"># 退出虚拟环境</span>conda <span class="token function">env</span> remove -n 虚拟环境名称 <span class="token comment" spellcheck="true"># 删除虚拟环境</span>conda <span class="token function">install</span> 软件包名称 <span class="token comment" spellcheck="true"># 安装软件包</span>conda remove 软件包名称 <span class="token comment" spellcheck="true"># 删除软件包</span>conda list <span class="token comment" spellcheck="true"># 查看已安装的包</span>conda search 软件包名称 <span class="token comment" spellcheck="true"># 查看可安装的包</span>conda info 软件包名称 <span class="token comment" spellcheck="true"># 查看包的信息</span>conda config --add channels 清华大学开源软件镜像站地址 <span class="token comment" spellcheck="true"># 添加清华大学开源软件镜像站</span>conda config --set show_channel_urls <span class="token function">yes</span> <span class="token comment" spellcheck="true"># 显示镜像站地址</span>conda config --set show_channel_urls no <span class="token comment" spellcheck="true"># 不显示镜像站地址</span></code></pre><h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><p>本文是在上篇文章的基础上，继续安装Anaconda，如果您还没有安装Ubuntu 22.04，请参考：<a href="https://sirxs.cn/2023/04/25/ubuntu22-04-server-an-zhuang/">Ubuntu 22.04 Server 安装实录</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Anaconda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 22.04 Server 安装实录：探索 Linux Server 世界的无限可能！</title>
      <link href="/2023/04/25/ubuntu22-04-server-an-zhuang/"/>
      <url>/2023/04/25/ubuntu22-04-server-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>Ubuntu 22.04 Server是Ubuntu官方推出的最新版本，它的安装过程非常简单，本文将记录一次Ubuntu 22.04 Server的安装实录。</p><h3 id="二、安装Ubuntu-22-04-Server"><a href="#二、安装Ubuntu-22-04-Server" class="headerlink" title="二、安装Ubuntu 22.04 Server"></a>二、安装Ubuntu 22.04 Server</h3><h4 id="2-1-下载Ubuntu-22-04-Server"><a href="#2-1-下载Ubuntu-22-04-Server" class="headerlink" title="2.1 下载Ubuntu 22.04 Server"></a>2.1 下载Ubuntu 22.04 Server</h4><p>Ubuntu 22.04 Server的下载地址：<a href="https://ubuntu.com/download/server">https://ubuntu.com/download/server</a></p><h4 id="2-2-下载Vmware-Workstation-Pro"><a href="#2-2-下载Vmware-Workstation-Pro" class="headerlink" title="2.2 下载Vmware Workstation Pro"></a>2.2 下载Vmware Workstation Pro</h4><p>Vmware Workstation Pro的下载地址：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></p><h4 id="2-3-安装Vmware-Workstation-Pro"><a href="#2-3-安装Vmware-Workstation-Pro" class="headerlink" title="2.3 安装Vmware Workstation Pro"></a>2.3 安装Vmware Workstation Pro</h4><p>安装Vmware Workstation Pro的过程非常简单，一路Next即可。</p><h4 id="2-4-安装Ubuntu-22-04-Server"><a href="#2-4-安装Ubuntu-22-04-Server" class="headerlink" title="2.4 安装Ubuntu 22.04 Server"></a>2.4 安装Ubuntu 22.04 Server</h4><h4 id="2-4-1-创建虚拟机"><a href="#2-4-1-创建虚拟机" class="headerlink" title="2.4.1 创建虚拟机"></a>2.4.1 创建虚拟机</h4><p>创建虚拟机网上教程很多，这里就不再赘述了。</p><h4 id="2-4-1-选择语言"><a href="#2-4-1-选择语言" class="headerlink" title="2.4.1 选择语言"></a>2.4.1 选择语言</h4><p>安装首页忘记截图了，选择<code>try or install ubuntu</code>。</p><p><img src="https://wangxs020202.gitee.io/pbad/new/1_2023-04-25_16-08-08.png" alt="1_2023-04-25_16-08-08"></p><h4 id="2-4-3-选择安装类型"><a href="#2-4-3-选择安装类型" class="headerlink" title="2.4.3 选择安装类型"></a>2.4.3 选择安装类型</h4><p>这里选择不更新安装器，直接继续安装。<br><img src="https://wangxs020202.gitee.io/pbad/new/2_2023-04-25_16-08-25.png" alt="2_2023-04-25_16-08-25"></p><h4 id="2-4-4-选择键盘布局"><a href="#2-4-4-选择键盘布局" class="headerlink" title="2.4.4 选择键盘布局"></a>2.4.4 选择键盘布局</h4><p><img src="https://wangxs020202.gitee.io/pbad/new/3_2023-04-25_16-08-34.png" alt="3_2023-04-25_16-08-34"></p><h4 id="2-4-5-选择安装类型"><a href="#2-4-5-选择安装类型" class="headerlink" title="2.4.5 选择安装类型"></a>2.4.5 选择安装类型</h4><p>这里我们选择最小安装。<br><img src="https://wangxs020202.gitee.io/pbad/new/4_2023-04-25_16-08-55.png" alt="4_2023-04-25_16-08-55"></p><h4 id="2-4-6-设置网络连接"><a href="#2-4-6-设置网络连接" class="headerlink" title="2.4.6 设置网络连接"></a>2.4.6 设置网络连接</h4><p>这可以选择默认的自动获取IP地址。但是如果你的网络环境不支持DHCP，那么你需要手动设置IP地址。<br>选择 DHCP 会有一个小小的问题，就是你的虚拟机的IP地址可能会变化，这样你就需要重新配置你的虚拟机的IP地址，这样就会很麻烦。所以，我建议你选择手动设置IP地址。<br><img src="https://wangxs020202.gitee.io/pbad/new/5_2023-04-25_16-09-15.png" alt="5_2023-04-25_16-09-15"></p><p><img src="https://wangxs020202.gitee.io/pbad/new/6_2023-04-25_16-09-28.png" alt="6_2023-04-25_16-09-28"></p><p><img src="https://wangxs020202.gitee.io/pbad/new/7_2023-04-25_16-11-06.png" alt="7_2023-04-25_16-11-06"></p><h4 id="2-4-7-配置镜像源地址"><a href="#2-4-7-配置镜像源地址" class="headerlink" title="2.4.7 配置镜像源地址"></a>2.4.7 配置镜像源地址</h4><p>这里我们选择阿里云的镜像源地址。<br><img src="https://wangxs020202.gitee.io/pbad/new/9_2023-04-25_16-12-12.png" alt="9_2023-04-25_16-12-12"></p><h4 id="2-4-8-磁盘分区"><a href="#2-4-8-磁盘分区" class="headerlink" title="2.4.8 磁盘分区"></a>2.4.8 磁盘分区</h4><p>这里不做任何修改，直接继续安装。<br><img src="https://wangxs020202.gitee.io/pbad/new/10_2023-04-25_16-12-36.png" alt="10_2023-04-25_16-12-36"></p><p><img src="https://wangxs020202.gitee.io/pbad/new/11_2023-04-25_16-12-49.png" alt="11_2023-04-25_16-12-49"></p><p><img src="https://wangxs020202.gitee.io/pbad/new/12_2023-04-25_16-13-03.png" alt="12_2023-04-25_16-13-03"></p><h4 id="2-4-9-创建登录用户"><a href="#2-4-9-创建登录用户" class="headerlink" title="2.4.9 创建登录用户"></a>2.4.9 创建登录用户</h4><p><img src="https://wangxs020202.gitee.io/pbad/new/13_2023-04-25_16-13-42.png" alt="13_2023-04-25_16-13-42"></p><h4 id="2-4-10-配置安装openssh-server"><a href="#2-4-10-配置安装openssh-server" class="headerlink" title="2.4.10 配置安装openssh-server"></a>2.4.10 配置安装openssh-server</h4><p>配置安装openssh-server，这个可以用来进行远程连接<br><img src="https://wangxs020202.gitee.io/pbad/new/14_2023-04-25_16-13-55.png" alt="14_2023-04-25_16-13-55"></p><h4 id="2-4-11-配置安装其他额外的软件"><a href="#2-4-11-配置安装其他额外的软件" class="headerlink" title="2.4.11 配置安装其他额外的软件"></a>2.4.11 配置安装其他额外的软件</h4><p>这里我们选择不安装额外的软件。<br><img src="https://wangxs020202.gitee.io/pbad/new/15_2023-04-25_16-14-10.png" alt="15_2023-04-25_16-14-10"></p><h4 id="2-4-12-安装过程"><a href="#2-4-12-安装过程" class="headerlink" title="2.4.12 安装过程"></a>2.4.12 安装过程</h4><p>系统安装过程没什么操作，这里就没再截图了。等待一段时间，会提示你安装完成。重新启动就可以了</p><h3 id="三、配置Ubuntu-22-04-Server"><a href="#三、配置Ubuntu-22-04-Server" class="headerlink" title="三、配置Ubuntu 22.04 Server"></a>三、配置Ubuntu 22.04 Server</h3><h4 id="3-1-安装vim编辑器"><a href="#3-1-安装vim编辑器" class="headerlink" title="3.1 安装vim编辑器"></a>3.1 安装vim编辑器</h4><pre class=" language-shell"><code class="language-shell">sudo apt-get install vim</code></pre><h4 id="3-2-设置root密码"><a href="#3-2-设置root密码" class="headerlink" title="3.2 设置root密码"></a>3.2 设置root密码</h4><p>连续输入两次root密码即可。这里密码是不显示的，所以你需要自己记住密码。</p><pre class=" language-shell"><code class="language-shell">sudo passwd root</code></pre><h4 id="3-3-编辑ssh服务的配置文件"><a href="#3-3-编辑ssh服务的配置文件" class="headerlink" title="3.3 编辑ssh服务的配置文件"></a>3.3 编辑ssh服务的配置文件</h4><pre class=" language-shell"><code class="language-shell">sudo vim /etc/ssh/sshd_configss</code></pre><p>修改图中两个位置的配置，然后保存退出。</p><p><img src="https://wangxs020202.gitee.io/pbad/new/16_2023-04-25_17-44-15.png" alt="16_2023-04-25_17-44-15"></p><h4 id="3-4-重启ssh服务"><a href="#3-4-重启ssh服务" class="headerlink" title="3.4 重启ssh服务"></a>3.4 重启ssh服务</h4><pre class=" language-shell"><code class="language-shell">sudo service ssh restart</code></pre><h4 id="3-5-安装网络工具，并查看IP地址"><a href="#3-5-安装网络工具，并查看IP地址" class="headerlink" title="3.5 安装网络工具，并查看IP地址"></a>3.5 安装网络工具，并查看IP地址</h4><pre class=" language-shell"><code class="language-shell">sudo apt-get install net-toolsifconfig</code></pre><p><img src="https://wangxs020202.gitee.io/pbad/new/17_2023-04-25_17-48-48.png" alt="17_2023-04-25_17-48-48"></p><h4 id="3-6-远程客户端登录root用户"><a href="#3-6-远程客户端登录root用户" class="headerlink" title="3.6 远程客户端登录root用户"></a>3.6 远程客户端登录root用户</h4><p><img src="https://wangxs020202.gitee.io/pbad/new/18_2023-04-25_17-49-45.png" alt="18_2023-04-25_17-49-45"><br><img src="https://wangxs020202.gitee.io/pbad/new/19_2023-04-25_17-50-03.png" alt="19_2023-04-25_17-50-03"></p><h4 id="3-7-更换apt源"><a href="#3-7-更换apt源" class="headerlink" title="3.7 更换apt源"></a>3.7 更换apt源</h4><pre class=" language-shell"><code class="language-shell"># 备份原有的源sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak# 编辑源文件sudo vim /etc/apt/sources.list</code></pre><p>删除原有的源，然后添加新的源，这里我添加的是清华大学源。</p><pre class=" language-text"><code class="language-text">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</code></pre><p>然后保存退出，更新源</p><pre class=" language-shell"><code class="language-shell">sudo apt-get update</code></pre><p>到这里，我们就完成了Ubuntu 22.04 Server的安装和一些基础的配置了。</p><h3 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h3><p>这里我们只是简单的安装了Ubuntu 22.04 Server，并且配置了一些基础的配置，比如设置root密码，安装vim编辑器，配置apt源等等。如果你想要安装其他的软件，可以参考Ubuntu官方的文档。</p><p>后续我会在这个基础上，会做一些服务的部署，以及docker的安装和使用。敬请期待。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Shell </tag>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Python世界中游刃有余：如何灵活运用Django日志记录功能</title>
      <link href="/2023/04/24/logging/"/>
      <url>/2023/04/24/logging/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>Django 是一个流行的 Python Web 框架，并且在开发过程中，日志记录是很重要的一部分。随着应用程序变得越来越复杂，我们不可避免地需要更细致、更高级的调试和追踪工具。<br>在Django的世界里，logging（日志记录）成了一个非常重要并且强大的工具。它可以帮助我们记录所有应用程序运行过程中的事件，从而让开发者能够更好地理解应用程序以及其中代码的工作方式。</p><p>那么，在Django中如何使用logging来分析我们的代码运行时出现的问题呢？接下来，我将会向您介绍如何利用Django 4.1.7<br>中的logging来提高开发质量和效率。</p><h3 id="二、什么是-logging"><a href="#二、什么是-logging" class="headerlink" title="二、什么是 logging"></a>二、什么是 logging</h3><p>logging到底是什么：简单地说，logging就是一种把程序运行时的信息（调试信息、错误、警告等）输出到指定位置的技术。当应用程序崩溃或者在运行上出现其他问题时，这些信息就会被日志记录器捕获，并显示给开发者来分析和理解问题原因。</p><p>logging日志还可以在开发者的控制台、文件甚至是邮件中显示，从而让开发者快速地了解应用程序的运行情况。</p><h3 id="三、Django中的logging"><a href="#三、Django中的logging" class="headerlink" title="三、Django中的logging"></a>三、Django中的logging</h3><p>Django提供了一组可定制的日志记录方式，以便开发者能够追踪他们的应用程序从框架到应用程序本身所打印的日志记录。Django提供的logging配置会输出所有的错误、警告和信息消息。如果你想在调试过程中获取更详细的数据，那么logging就是您非常重要的一个工具。</p><ol><li><p>Django日志记录器的默认配置：</p><p>根日志级别 (Root Logger Level)：WARNING<br>在指定文件中保存（Rotate）日志<br>固定格式，包含日期时间戳、日志分类、模块名称和日志等级<br>这里是一个简单的例子，演示如何启用日志系统并记录一些信息。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> logginglogger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># do something interesting </span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Receiving request from %s'</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> some_function<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>exception<span class="token punctuation">(</span><span class="token string">"Error when calling some_function()"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>上面的例子顺序地展示了创建一个日志记录器实例 logger &#x3D; logging.getLogger(<strong>name</strong>) 。 然后，在 my_view 函数中使用它来记录信息。</p><p>其中，通过例子可以看出 logging 模块结合 Django 包含以下几部分：</p><p>Module 信息<br>日志记录级别<br>日志分发处理器<br>格式化信息<br>过滤器<br>Python标准库中的logging模块提供了一个灵活的机制，允许开发人员自定义筛选日志事件以及将其路由到目标位置的方法。这允许开发者采取不同的方式来处理应用程序的多个日志消息类型并按需修改配置。</p></li><li><p>日志输出等级（Log Levels）</p><p>在logging系统中，存在5种默认记录级别，列举如下：</p><ol><li>DEBUG：详细的日志记录，通常只出现在诊断问题上</li><li>INFO：证明事情按预期工作</li><li>WARNING：指示可能出了问题，但直接影响程序正常运行的级别</li><li>ERROR：由于更严重的问题，该软件无法执行某些功能</li><li>CRITICAL：指出非常严重的错误，表明程序本身可能无法继续进行<br>通过 logging 模块的 setLevel 来确定记录的等级。如果您将记录器级别设置为 DEBUG，则所有可用级别的日志记录都可以被记录。如果您将其设置为<br>ERROR，则所有 ERROR 和 CRITICAL 级别的日志将被记录，但其他等级的日志则不会被处理。</li></ol></li><li><p>日志输出格式</p><p>另一个重要的logging配置是日志记录格式。Django使用string format语法的logging.basicConfig()方法，可以很容易地自定义输出的日志信息。</p><p>格式化字符串中，可以使用以下一些占位符：</p><ol><li>%(asctime)s：日志记录的时间</li><li>%(levelname)s：日志记录的级别</li><li>%(name)s：日志记录器的名称</li><li>%(message)s：日志记录的消息</li><li>%(filename)s：产生日志记录的文件名</li><li>%(module)s：产生日志记录的模块名</li><li>%(funcName)s：产生日志记录的函数名</li><li>%(lineno)d：产生日志记录的代码行号</li><li>%(process)d：进程ID</li><li>%(thread)d：线程ID</li><li>%(threadName)s：线程名称</li><li>%(pathname)s：产生日志记录的代码文件的完整路径名</li><li>%(processName)s：进程名称<br>下面是一个例子显示了如何设置自己的格式化。</li></ol><pre class=" language-python"><code class="language-python"><span class="token string">'formatters'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'verbose'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token string">'simple'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'%(levelname)s %(message)s'</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token comment" spellcheck="true"># 标准输出格式</span>    <span class="token string">'standard'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token comment" spellcheck="true"># (日志级别ID) [具体时间][线程名:线程ID][日志名字:])] [输出的模块:输出的函数]:日志内容</span>        <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'%(levelname)s [%(asctime)s] %(process)d %(thread)d "%(pathname)s/%(funcName)s:%(lineno)d" %(message)s'</span><span class="token punctuation">,</span>        <span class="token string">'datefmt'</span><span class="token punctuation">:</span> <span class="token string">'%d/%b/%Y:%H:%M:%S %z'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 23/Dec/2017:14:21:40 +0800</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>其中， LOGGING 中定义了根记录器的配置。 它表示Django默认情况下为我们安装和配置的 logging系统。<br>我们通过继承默认的配置并对其进行修改来对其进行自定义。</p><p>除此之外，你还可以设置其他函数来更加精确地控制日志处理。例如，您可以定义过滤器来动态更改日志级别等。</p><p><code>loggerFilter.py</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">class</span> <span class="token class-name">UrlFilter</span><span class="token punctuation">(</span>logging<span class="token punctuation">.</span>Filter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">filter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">:</span>        urls_to_ignore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'/api/template/get_software/'</span><span class="token punctuation">,</span> <span class="token string">'/api/software/software_install_status/'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> urls_to_ignore<span class="token punctuation">:</span>            <span class="token keyword">if</span> record<span class="token punctuation">.</span>getMessage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'"POST &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><p><code>settings.py</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> loggerFilter <span class="token keyword">import</span> <span class="token operator">*</span><span class="token string">'filters'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token comment" spellcheck="true"># 只有在Django debug为True时才在屏幕打印日志</span>    <span class="token string">'require_debug_true'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'()'</span><span class="token punctuation">:</span> <span class="token string">'django.utils.log.RequireDebugTrue'</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token comment" spellcheck="true"># 过滤url</span>    <span class="token string">'url_filter'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'()'</span><span class="token punctuation">:</span> UrlFilter<span class="token punctuation">,</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre></li><li><p>日志分发处理器</p><p>logging模块提供了多种处理器，用于将日志消息发送到不同的目的地。Django默认配置中的处理器有：</p><ol><li>NullHandler：不做任何处理</li><li>StreamHandler：将日志消息发送到输出流，如sys.stderr, sys.stdout或任何文件-like对象</li><li>FileHandler：将日志消息发送到磁盘文件，默认情况下文件大小会无限增长</li><li>SMTPHandler：将日志消息以电子邮件的形式发送给管理员</li><li>HTTPHandler：将日志消息以GET或POST的形式发送到一个HTTP服务器</li><li>BaseRotatingHandler：基类，用于将日志消息发送到磁盘文件，并支持日志文件的自动切割</li><li>RotatingFileHandler：继承自BaseRotatingHandler，用于将日志消息发送到磁盘文件，并支持日志文件的自动切割</li><li>TimedRotatingFileHandler：继承自BaseRotatingHandler，用于将日志消息发送到磁盘文件，并支持日志文件的按时间自动切割</li><li>SocketHandler：将日志消息发送到网络套接字</li><li>DatagramHandler：将日志消息发送到网络套接字，但使用UDP协议</li><li>SysLogHandler：将日志消息发送到UNIX系统的syslogd守护进程</li><li>NTEventLogHandler：将日志消息发送到Windows NT&#x2F;2000&#x2F;XP的事件日志</li><li>MemoryHandler：将日志消息发送到内存中的制定buffer</li><li>HTTPHandler：将日志消息以GET或POST的形式发送到一个HTTP服务器</li><li>QueueHandler：将日志消息发送到multiprocessing.Queue对象</li><li>QueueListener：从multiprocessing.Queue对象中读取消息，并将这些消息发送到指定的处理器</li></ol><p>除了上面列出的处理器，Django还提供了一些自定义的处理器，用于将日志消息发送到不同的目的地。Django默认配置中的处理器有：</p><ol><li>AdminEmailHandler：将日志消息以电子邮件的形式发送给管理员</li><li>ColorizingStreamHandler：将日志消息发送到输出流，如sys.stderr, sys.stdout或任何文件-like对象，并且可以为不同的日志级别设置不同的颜色</li><li>SafeExceptionReporterFilter：过滤掉敏感信息，如数据库密码等</li><li>ServerFormatter：格式化日志消息，用于将日志消息发送到远程服务器</li><li>SMTPFormatter：格式化日志消息，用于将日志消息以电子邮件的形式发送给管理员</li><li>UnicodeStreamHandler：将日志消息发送到输出流，如sys.stderr, sys.stdout或任何文件-like对象，并且可以为不同的日志级别设置不同的颜色</li></ol><p>除了上面列出的处理器，Django还提供了一些自定义的处理器，用于将日志消息发送到不同的目的地。Django默认配置中的处理器有：</p><ol><li>AdminEmailHandler：将日志消息以电子邮件的形式发送给管理员</li><li>ColorizingStreamHandler：将日志消息发送到输出流，如sys.stderr, sys.stdout或任何文件-like对象，并且可以为不同的日志级别设置不同的颜色</li><li>SafeExceptionReporterFilter：过滤掉敏感信息，如数据库密码等</li></ol></li><li><p>配置示例</p></li></ol><pre class=" language-python"><code class="language-python">LOGGING <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'version'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 是否启用日志配置</span>    <span class="token string">'disable_existing_loggers'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 日志文件的配置-格式化输出</span>    <span class="token string">'formatters'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'verbose'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token string">'simple'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'%(levelname)s %(message)s'</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token comment" spellcheck="true"># 标准输出格式</span>        <span class="token string">'standard'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token comment" spellcheck="true"># (日志级别ID) [具体时间][线程名:线程ID][日志名字:])] [输出的模块:输出的函数]:日志内容</span>            <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'%(levelname)s [%(asctime)s] %(process)d %(thread)d "%(pathname)s/%(funcName)s:%(lineno)d" %(message)s'</span><span class="token punctuation">,</span>            <span class="token string">'datefmt'</span><span class="token punctuation">:</span> <span class="token string">'%d/%b/%Y:%H:%M:%S %z'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># 23/Dec/2017:14:21:40 +0800</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token comment" spellcheck="true"># 过滤器</span>    <span class="token string">'filters'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token comment" spellcheck="true"># 只有在Django debug为True时才在屏幕打印日志</span>        <span class="token string">'require_debug_true'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'()'</span><span class="token punctuation">:</span> <span class="token string">'django.utils.log.RequireDebugTrue'</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token comment" spellcheck="true"># 过滤url</span>        <span class="token string">'url_filter'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'()'</span><span class="token punctuation">:</span> UrlFilter<span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token comment" spellcheck="true"># 处理器</span>    <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token comment" spellcheck="true"># 控制台输出</span>        <span class="token string">'console'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.StreamHandler'</span><span class="token punctuation">,</span>            <span class="token string">'filters'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'require_debug_true'</span><span class="token punctuation">,</span> <span class="token string">'url_filter'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'simple'</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token comment" spellcheck="true"># 调试信息</span>        <span class="token string">'info_file'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.handlers.RotatingFileHandler'</span><span class="token punctuation">,</span>            <span class="token string">'filters'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'url_filter'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'filename'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'logs/info.log'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 输出位置(先创建文件夹)</span>            <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'standard'</span><span class="token punctuation">,</span>            <span class="token string">'maxBytes'</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>            <span class="token string">'backupCount'</span><span class="token punctuation">:</span> <span class="token number">10</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token comment" spellcheck="true"># django日志</span>        <span class="token string">'django_file'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'DEBUG'</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.handlers.RotatingFileHandler'</span><span class="token punctuation">,</span>            <span class="token string">'filename'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'logs/django.log'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 输出位置(先创建文件夹)</span>            <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'simple'</span><span class="token punctuation">,</span>            <span class="token string">'maxBytes'</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>            <span class="token string">'backupCount'</span><span class="token punctuation">:</span> <span class="token number">100</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token comment" spellcheck="true"># 重大错误日志</span>        <span class="token string">'error_file'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'ERROR'</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.handlers.RotatingFileHandler'</span><span class="token punctuation">,</span>            <span class="token string">'filename'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'logs/error.log'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 输出位置(先创建文件夹)</span>            <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'standard'</span><span class="token punctuation">,</span>            <span class="token string">'maxBytes'</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>            <span class="token string">'backupCount'</span><span class="token punctuation">:</span> <span class="token number">10</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token comment" spellcheck="true"># 日志记录器</span>    <span class="token string">'loggers'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token comment" spellcheck="true"># 自定义日志</span>        <span class="token string">''</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'info_file'</span><span class="token punctuation">,</span> <span class="token string">'console'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token string">'propagate'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token comment" spellcheck="true"># django日志</span>        <span class="token string">'django'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'django_file'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'DEBUG'</span><span class="token punctuation">,</span>            <span class="token string">'propagate'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token comment" spellcheck="true"># 错误日志</span>        <span class="token string">'error'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'error_file'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'ERROR'</span><span class="token punctuation">,</span>            <span class="token string">'propagate'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>Django 内置的 logging 库提供了强大和灵活的日志记录功能，可以方便地满足不同的需求。本文介绍了 Django 中 logger<br>的基本配置和使用方法，希望能给读者带来一些思路。再次强调，在生产环境中日志记录很重要，因此应该专注于正确配置 logger<br>以及在应用程序中使用它来记录日志。</p><p>最后，提醒一下：正确地配置 logging 是必要且重要的一步，因为它直接影响实际应用程序的性能。因此，我们应该使用得当而不是滥用它。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 日志记录 </tag>
            
            <tag> Logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始：在CentOS Stream 9上安装MySQL 8并启用远程root连接</title>
      <link href="/2023/04/22/an-zhuang-mysql/"/>
      <url>/2023/04/22/an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>MySQL是一款开源的关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle公司。MySQL是最流行的关系型数据库管理系统之一，在WEB应用方面MySQL是最好的RDBMS（关系数据库管理系统）应用软件之一。</p><p>本文将介绍如何在CentOS Stream 9上安装MySQL 8并启用远程root连接。</p><h3 id="二、安装MySQL-8"><a href="#二、安装MySQL-8" class="headerlink" title="二、安装MySQL 8"></a>二、安装MySQL 8</h3><ol><li><p>加MySQL 8 Yum源</p><p> 在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">dnf install https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm</code></pre></li><li><p>安装MySQL 8</p><p> 在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">dnf install mysql-community-server</code></pre></li><li><p>启动MySQL 8,并设置开机启动</p><p> 在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">systemctl start mysqldsystemctl enable mysqld</code></pre></li><li><p>查看MySQL 8的初始密码</p><p> 在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">grep 'temporary password' /var/log/mysqld.log</code></pre><p> 输出如下：</p><pre class=" language-shell"><code class="language-shell">2021-04-22T10:04:55.000000Z 1 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: 5q5q5q5q5q</code></pre><p> 从输出中可以看到MySQL 8的初始密码为<code>5q5q5q5q5q</code>。</p></li><li><p>登录MySQL 8</p><p> 在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">mysql -u root -p</code></pre><p> 输入密码<code>5q5q5q5q5q</code>，回车，登录成功。</p></li><li><p>修改MySQL 8的root密码</p><p> 在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password';</code></pre><p> 将<code>new_password</code>替换为你想要的密码，回车，修改成功。<br> <code>注意: MySQL 8的密码策略要求密码必须包含大小写字母、数字和特殊字符，且长度不能小于8位。</code></p></li><li><p>允许root用户从任何主机连接到MySQL数据库</p><p> 在命令行中执行以下命令(添加一个可以任何主机连接的用户)：</p><pre class=" language-shell"><code class="language-shell">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'new_password' WITH GRANT OPTION;</code></pre><p> 将<code>new_password</code>替换为你想要的密码，回车，修改成功。</p><p> 还有另一种方法，直接修改本身的root用户，允许root用户从任何主机连接到MySQL数据库，执行以下命令：</p><pre class=" language-shell"><code class="language-shell">use mysql;update user set host='%' where user='root';</code></pre><p> <code>注意: 这种方法会导致root用户可以从任何主机连接到MySQL数据库，不安全。</code></p><p> 最后别忘了在命令行中执行以下命令(刷新权限)：</p><pre class=" language-shell"><code class="language-shell">flush privileges;</code></pre></li><li><p>退出MySQL 8，重启MySQL 8</p><p> 在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">exitsystemctl restart mysqld</code></pre></li><li><p>修改MySQL 8的配置文件</p><p> 在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">vim /etc/my.cnf</code></pre><p> 在<code>[mysqld]</code>下面添加如下配置：</p><pre class=" language-shell"><code class="language-shell">bind-address=0.0.0.0skip-name-resolve</code></pre><p> 保存退出，重启MySQL 8。</p><pre class=" language-shell"><code class="language-shell">systemctl restart mysqld</code></pre></li><li><p>防火墙放行MySQL 8的端口</p><p>在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --add-port=3306/tcp --permanentfirewall-cmd --reload</code></pre><p><code>注意: 如果你的MySQL 8的端口不是3306，那么需要将上面的命令中的3306替换为你的MySQL 8的端口。</code></p></li></ol><h3 id="三、连接MySQL-8"><a href="#三、连接MySQL-8" class="headerlink" title="三、连接MySQL 8"></a>三、连接MySQL 8</h3><ol><li><p>从本机连接MySQL 8</p><p> 在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">mysql -u root -p</code></pre><p> 输入密码<code>new_password</code>，回车，登录成功。</p></li><li><p>从远程主机连接MySQL 8<br>使用可视化工具连接MySQL 8，如Navicat、DBeaver等。</p><p><code>注意: 如果你的MySQL 8的端口不是3306，那么需要将上面的命令中的3306替换为你的MySQL 8的端口。</code></p><p><img src="https://wangxs020202.gitee.io/pbad/new/1682159126427.jpg" alt="1682159126427"></p><p><img src="https://wangxs020202.gitee.io/pbad/new/1682159271082.jpg" alt="1682159271082"></p></li></ol><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>MySQL 8较之前的版本有很多变化，比如密码策略、默认的认证方式等，大体安装过程和之前的版本差不多，但是在配置方面有很多变化，需要注意。</p><p>性能优化方面，MySQL 8的性能优化方面有很多变化，比如InnoDB的默认页大小从16KB变为16MB，这样可以减少磁盘IO，提高性能，但是会占用更多的内存，所以需要根据实际情况进行调整。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造自己的博客天地：在腾讯云服务器上部署Hexo博客</title>
      <link href="/2023/04/21/clouddeploymentblog/"/>
      <url>/2023/04/21/clouddeploymentblog/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>这个博客自创建以来也有差不多一周了，之前一直在使用GitHub Pages来搭建博客，但是由于GitHub Pages的访问速度比较慢，所以最近决定将博客迁移到腾讯云服务器上使用Nginx来做代理，这样可以实现域名访问，访问速度也会更快。</p><h3 id="二、腾讯云服务器部署Hexo博客"><a href="#二、腾讯云服务器部署Hexo博客" class="headerlink" title="二、腾讯云服务器部署Hexo博客"></a>二、腾讯云服务器部署Hexo博客</h3><h4 id="2-1-购买腾讯云服务器"><a href="#2-1-购买腾讯云服务器" class="headerlink" title="2.1 购买腾讯云服务器"></a>2.1 购买腾讯云服务器</h4><p>首先需要购买腾讯云服务器，这里推荐购买腾讯云的云服务器，因为腾讯云的云服务器性价比比较高，而且还有免费的流量，可以满足日常使用的需求。</p><h4 id="2-2-购买域名"><a href="#2-2-购买域名" class="headerlink" title="2.2 购买域名"></a>2.2 购买域名</h4><p>接下来需要购买一个域名，这里也可以使用腾讯云的域名服务，购买域名的时候需要注意一下域名的后缀，如果你购买的是<code>.cn</code>的域名，那么需要在腾讯云的域名服务中进行备案，备案需要一定的时间，所以在购买域名的时候需要注意一下。</p><p><code>服务器与域名也可以在其他云服务商处购买。</code></p><h4 id="2-3-配置域名解析"><a href="#2-3-配置域名解析" class="headerlink" title="2.3 配置域名解析"></a>2.3 配置域名解析</h4><p>在购买好域名之后，需要将域名解析到腾讯云服务器的公网IP上，这样才能通过域名访问到博客。</p><p>这些网上都有教程，这里就不再赘述了。</p><h4 id="2-4-配置腾讯云服务器"><a href="#2-4-配置腾讯云服务器" class="headerlink" title="2.4 配置腾讯云服务器"></a>2.4 配置腾讯云服务器</h4><h5 id="2-4-1-安装Git、Nginx"><a href="#2-4-1-安装Git、Nginx" class="headerlink" title="2.4.1 安装Git、Nginx"></a>2.4.1 安装Git、Nginx</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y <span class="token function">git</span> nginx</code></pre><h5 id="2-4-2-配置Git"><a href="#2-4-2-配置Git" class="headerlink" title="2.4.2 配置Git"></a>2.4.2 配置Git</h5><p><code>注意：如果本地没有配置ssh，先配一个ssh。这里因为我已经有了，就不再配置了。</code></p><p>开始前先切到<code>root</code>用户下,执行一下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token function">git</span> <span class="token comment" spellcheck="true"># 添加一个新用户</span><span class="token function">passwd</span> <span class="token function">git</span> <span class="token comment" spellcheck="true"># 设置git用户密码</span><span class="token function">su</span> <span class="token function">git</span> <span class="token comment" spellcheck="true"># 切换用户进行后续操作</span><span class="token function">cd</span> /home/git/<span class="token function">mkdir</span> -p projects/blog <span class="token comment" spellcheck="true"># 把项目目录建立起来</span><span class="token function">mkdir</span> repos <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> repos<span class="token function">git</span> init --bare blog.git <span class="token comment" spellcheck="true"># 创建仓库</span><span class="token function">cd</span> blog.git/hooks</code></pre><p>在<code>blog.git/hooks</code>目录下创建一个<code>post-receive</code>文件，内容如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/git/projects/blog --git-dir<span class="token operator">=</span>/home/git/repos/blog.git checkout -f</code></pre><p>退出vim，继续进行用户相关的操作：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x post-receive <span class="token comment" spellcheck="true"># 添加可执行权限</span></code></pre><p>退出git用户，切换到root用户，执行以下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /home/git/repos/blog.git <span class="token comment" spellcheck="true"># 给git用户添加权限</span></code></pre><p>在我们本地测试一下是否成功：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@server_ip:/home/git/repos/blog.git</code></pre><p>如果成功，会在当前目录下生成一个<code>blog</code>文件夹，目前里面是空的，因为我们还没有往里面添加文件。</p><h5 id="2-4-3-配置Nginx"><a href="#2-4-3-配置Nginx" class="headerlink" title="2.4.3 配置Nginx"></a>2.4.3 配置Nginx</h5><p>修改<code>/etc/nginx/nginx.conf</code>文件，修改以下内容：</p><p>开头</p><pre class=" language-bash"><code class="language-bash">user root<span class="token punctuation">;</span></code></pre><p>server</p><pre class=" language-bash"><code class="language-bash">server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        listen       80<span class="token punctuation">;</span>        server_name  your_domain<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># Load configuration files for the default server block.</span>        include /etc/nginx/default.d/*.conf<span class="token punctuation">;</span>        location / <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        root /home/git/projects/blog<span class="token punctuation">;</span>        index index.html index.htm<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        error_page 404 /404.html<span class="token punctuation">;</span>        location <span class="token operator">=</span> /404.html <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        error_page 500 502 503 504 /50x.html<span class="token punctuation">;</span>        location <span class="token operator">=</span> /50x.html <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p><code>注意：这里的server_name需要改成你自己的域名。</code></p><h5 id="2-4-4-配置Hexo"><a href="#2-4-4-配置Hexo" class="headerlink" title="2.4.4 配置Hexo"></a>2.4.4 配置Hexo</h5><p>在本地博客目录下执行以下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-deployer-git</code></pre><p>修改<code>_config.yml</code>文件，添加以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//your_domain<span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@server_ip<span class="token punctuation">:</span>/home/git/repos/blog.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre><p><code>注意：这里的your_domain需要改成你自己的域名,repo需要改成你自己的服务器地址。</code></p><h5 id="2-4-5-部署博客"><a href="#2-4-5-部署博客" class="headerlink" title="2.4.5 部署博客"></a>2.4.5 部署博客</h5><p>在本地博客目录下执行以下命令：</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo ghexo d</code></pre><p>如果成功，会在服务器上生成一个<code>blog</code>文件夹，里面就是我们的博客了。</p><h5 id="2-4-6-访问博客"><a href="#2-4-6-访问博客" class="headerlink" title="2.4.6 访问博客"></a>2.4.6 访问博客</h5><p>启动Nginx服务并访问该博客网站，如果能正常访问，说明部署成功。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token function">enable</span> nginx.service <span class="token comment" spellcheck="true"># 设置开机启动</span><span class="token function">sudo</span> systemctl start nginx.service  <span class="token comment" spellcheck="true"># 启动服务</span><span class="token function">sudo</span> systemctl stop nginx.service   <span class="token comment" spellcheck="true"># 停止服务</span><span class="token function">sudo</span> systemctl restart nginx.service <span class="token comment" spellcheck="true"># 重启服务</span><span class="token function">sudo</span> systemctl status nginx.service <span class="token comment" spellcheck="true"># 查看服务状态</span></code></pre><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>通过本文，读者可以了解如何利用腾讯云的便捷服务快速搭建自己的Hexo博客，并将其部署到互联网上，与大家分享自己的思考和经验。期望本文对那些对博客写作有兴趣的人提供一些又新又有用的参考。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Nginx </tag>
            
            <tag> 腾讯云 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Python运行速度与依赖问题，亲测打包神器用Nuitka让你的应用程序起飞！</title>
      <link href="/2023/04/20/nuitkavspyinstaller/"/>
      <url>/2023/04/20/nuitkavspyinstaller/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>Nuitka是一个基于Python语言开发的编译器，它可以将Python代码编译成本地机器码，从而提高Python代码的运行速度。相较于传统解释器，Nuitka编译器通过消除了字节码执行过程中的一些瓶颈和无用操作，使得Python程序的执行效率大大提升。</p><p>使用Nuitka编译器编译Python代码之后，得到的是本地机器码（更具体的说是C&#x2F;C++代码），不再需要解释器进行执行，因此其运行速度比解释器执行Python代码更快，还可以将代码打包为独立的可执行文件，在没有Python环境的机器上也能够运行Python应用程序。</p><p>Nuitka不仅支持Python2和Python3，还提供了丰富的编译选项和调试工具，可以在不同平台和发布配置下生成高效、稳定和兼容性强的可执行文件。总之，Nuitka是一款非常优秀的Python编译器工具，值得开发者们尝试使用。</p><p>接下来，我们通过一个简单的示例来看一下Nuitka与PyInstaller的区别，以及如何使用Nuitka打包Python应用程序。</p><h3 id="二、Nuitka与PyInstaller的区别"><a href="#二、Nuitka与PyInstaller的区别" class="headerlink" title="二、Nuitka与PyInstaller的区别"></a>二、Nuitka与PyInstaller的区别</h3><p>Nuitka和PyInstaller都是Python打包工具，但是它们的打包方式不同，Nuitka是将Python代码编译成本地机器码，而PyInstaller是将Python代码打包成可执行文件。</p><p>Nuitka和PyInstaller的区别如下：</p><table><thead><tr><th align="left"></th><th align="left">Nuitka</th><th align="left">PyInstaller</th></tr></thead><tbody><tr><td align="left">打包方式</td><td align="left">编译成本地机器码</td><td align="left">打包成可执行文件</td></tr><tr><td align="left">打包速度</td><td align="left">快</td><td align="left">慢</td></tr><tr><td align="left">打包后的文件大小</td><td align="left">小</td><td align="left">大</td></tr><tr><td align="left">打包后的文件可移植性</td><td align="left">高</td><td align="left">低</td></tr><tr><td align="left">打包后的文件执行速度</td><td align="left">快</td><td align="left">慢</td></tr><tr><td align="left">打包后的文件占用内存</td><td align="left">小</td><td align="left">大</td></tr><tr><td align="left">打包后的文件是否需要Python环境</td><td align="left">不需要</td><td align="left">不需要</td></tr></tbody></table><h3 id="三、Nuitka与PyInstaller的安装"><a href="#三、Nuitka与PyInstaller的安装" class="headerlink" title="三、Nuitka与PyInstaller的安装"></a>三、Nuitka与PyInstaller的安装</h3><p>Nuitka与PyInstaller的安装非常简单，只需要使用pip命令即可完成安装。</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> Nuitkapip <span class="token function">install</span> PyInstaller</code></pre><p>Nuitka需要配合C++的编译器来进行打包所以还需要下载C++的编译器。</p><p>下载vs2019(MSVS)或者MinGW64，反正都是C++的编译器，随便下。</p><h3 id="四、Nuitka与PyInstaller的使用"><a href="#四、Nuitka与PyInstaller的使用" class="headerlink" title="四、Nuitka与PyInstaller的使用"></a>四、Nuitka与PyInstaller的使用</h3><h4 id="4-1-Demo编写"><a href="#4-1-Demo编写" class="headerlink" title="4.1 Demo编写"></a>4.1 Demo编写</h4><p>安装PyQt5,通过pip命令即可完成安装。</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> PyQt5</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QMessageBox<span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>initUI<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">initUI</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">'Demo'</span><span class="token punctuation">)</span>        button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'Click me'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        button<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>        button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>onButtonClick<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">onButtonClick</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        QMessageBox<span class="token punctuation">.</span>question<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'Message'</span><span class="token punctuation">,</span> <span class="token string">'Hello, World!'</span><span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Ok<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    demo <span class="token operator">=</span> Demo<span class="token punctuation">(</span><span class="token punctuation">)</span>    demo<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>首先我们需要导入PyQt5库以及sys模块。然后，我们定义一个名为Demo的类，它继承自QWidget类。在类的构造函数中调用了父类的构造函数和initUI（）方法。</p><p>在initUI（）方法中，我们设置了窗口的尺寸和标题，并创建了一个QPushButton对象。最后，将 clicked 信号连接到 onButtonClick()<br>方法上，该方法在按钮被点击时被执行。</p><p>onButtonClick（）方法只是在控制台上打印了一条消息。</p><p>最后，我们实例化QApplication类，并创建Demo对象并展示。调用sys.exit（）方法来确保程序能够完美退出。</p><p>运行程序，可以看到如下界面：</p><p><img src="https://wangxs020202.gitee.io/pbad/new/Nuitka_2023-04-20_14-39-02.gif" alt="Nuitka_2023-04-20_14-39-02"></p><h4 id="4-2-Nuitka打包"><a href="#4-2-Nuitka打包" class="headerlink" title="4.2 Nuitka打包"></a>4.2 Nuitka打包</h4><p>接下来，我们使用Nuitka将上面的Python代码编译成本地机器码，然后再运行看看效果。</p><p>首先，我们需要使用Nuitka命令将Python代码编译成本地机器码，命令如下：</p><pre class=" language-bash"><code class="language-bash">nuitka --standalone --windows-disable-console --mingw64 --nofollow-imports --show-memory --show-progress --plugin-enable<span class="token operator">=</span>pyqt5 --output-dir<span class="token operator">=</span>o 你的.py</code></pre><pre class=" language-txt"><code class="language-txt">--standalone：生成独立的可执行文件--windows-disable-console：禁用控制台窗口--mingw64：使用MinGW64编译器--nofollow-imports：不跟踪导入的模块--show-memory：显示内存占用情况--show-progress：显示打包进度--plugin-enable=qt-plugins：启用Qt插件--include-qt-plugins=sensible,styles：包含Qt插件--output-dir=o：指定输出目录</code></pre><p>Nuitka提供了丰富的编译选项，可以根据不同的需求进行选择，下面是Nuitka的编译选项列表。</p><table><thead><tr><th align="left">编译选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">–standalone</td><td align="left">生成独立的可执行文件</td></tr><tr><td align="left">–mingw64</td><td align="left">使用MinGW64编译器</td></tr><tr><td align="left">–mingw32</td><td align="left">使用MinGW32编译器</td></tr><tr><td align="left">–msvc</td><td align="left">使用MSVC编译器</td></tr><tr><td align="left">–follow-imports</td><td align="left">跟踪导入的模块</td></tr><tr><td align="left">–nofollow-imports</td><td align="left">不跟踪导入的模块</td></tr><tr><td align="left">–windows-disable-console</td><td align="left">禁用控制台窗口</td></tr><tr><td align="left">–windows-icon-from-ico</td><td align="left">使用ICO图标</td></tr><tr><td align="left">–windows-icon-from-exe</td><td align="left">使用EXE图标</td></tr><tr><td align="left">–output-dir</td><td align="left">指定输出目录</td></tr><tr><td align="left">–show-progress</td><td align="left">显示打包进度</td></tr><tr><td align="left">–show-scons</td><td align="left">显示Scons的输出</td></tr><tr><td align="left">–show-modules</td><td align="left">显示导入的模块</td></tr><tr><td align="left">–show-memory</td><td align="left">显示内存占用情况</td></tr></tbody></table><p>编译完成后，会在指定的输出目录下生成一个名为你的.exe的可执行文件，双击运行，可以看到如下界面：</p><p><img src="https://wangxs020202.gitee.io/pbad/new/Nuitka_2023-04-20_15-23-29.gif" alt="Nuitka_2023-04-20_14-39-02"></p><h4 id="4-2-PyInstaller打包"><a href="#4-2-PyInstaller打包" class="headerlink" title="4.2 PyInstaller打包"></a>4.2 PyInstaller打包</h4><p>下面我们使用PyInstaller将上面的Python代码打包，然后再运行看看效果。</p><p>首先，我们需要使用PyInstaller命令将Python代码打包成可执行文件，命令如下：</p><pre class=" language-bash"><code class="language-bash">pyinstaller -F -w 你的.py</code></pre><pre class=" language-txt"><code class="language-txt">-F：打包成一个可执行文件-w：禁用控制台窗口</code></pre><p>PyInstaller提供了丰富的打包选项，可以根据不同的需求进行选择，下面是PyInstaller的打包选项列表。</p><table><thead><tr><th align="left">打包选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-F</td><td align="left">打包成一个可执行文件</td></tr><tr><td align="left">-D</td><td align="left">打包成一个文件夹</td></tr><tr><td align="left">-w</td><td align="left">禁用控制台窗口</td></tr><tr><td align="left">-i</td><td align="left">使用ICO图标</td></tr><tr><td align="left">-c</td><td align="left">打包时不删除临时文件</td></tr><tr><td align="left">-n</td><td align="left">指定输出文件名</td></tr><tr><td align="left">-p</td><td align="left">指定第三方模块的路径</td></tr><tr><td align="left">-d</td><td align="left">指定依赖文件的路径</td></tr><tr><td align="left">-s</td><td align="left">打包时不删除临时文件</td></tr><tr><td align="left">-v</td><td align="left">打包时显示详细信息</td></tr><tr><td align="left">-h</td><td align="left">显示帮助信息</td></tr></tbody></table><p>打包完成后，会在当前目录下生成一个名为dist的文件夹，里面包含一个名为你的.exe的可执行文件，双击运行，可以看到如下界面：</p><p><img src="https://wangxs020202.gitee.io/pbad/new/Nuitka_2023-04-20_16-10-09.gif" alt="Nuitka_2023-04-20_16-10-09"></p><h3 id="五、Nuitka与PyInstaller的对比"><a href="#五、Nuitka与PyInstaller的对比" class="headerlink" title="五、Nuitka与PyInstaller的对比"></a>五、Nuitka与PyInstaller的对比</h3><h4 id="5-1-可执行文件大小"><a href="#5-1-可执行文件大小" class="headerlink" title="5.1 可执行文件大小"></a>5.1 可执行文件大小</h4><p>Nuitka打包后的可执行文件大小为 4.95M，PyInstaller打包后的可执行文件大小为 34.6M。</p><p><img src="https://wangxs020202.gitee.io/pbad/new/Nuitka_2023-04-20_16-15-37.png" alt="Nuitka_2023-04-20_16-15-37"></p><h4 id="5-2-打包速度"><a href="#5-2-打包速度" class="headerlink" title="5.2 打包速度"></a>5.2 打包速度</h4><p>Nuitka首次打包速度会有点长，时间取决于你所用的库的多少，但是第二次打包速度会很快，因为Nuitka会缓存之前的打包结果，下次打包时会直接使用缓存结果，所以第二次打包速度会很快。</p><p>PyInstaller打包速度较快，时间取决于你所用的库的多少，因为我们所引用的包就只有一个PyQt5，所以打包速度也可以接受。</p><h4 id="5-3-打包后的可执行文件运行速度"><a href="#5-3-打包后的可执行文件运行速度" class="headerlink" title="5.3 打包后的可执行文件运行速度"></a>5.3 打包后的可执行文件运行速度</h4><p>Nuitka打包后的可执行文件运行速度较快，PyInstaller打包后的可执行文件运行速度与前者对比就略显不足了。</p><h4 id="5-4-打包后的可执行文件占用内存"><a href="#5-4-打包后的可执行文件占用内存" class="headerlink" title="5.4 打包后的可执行文件占用内存"></a>5.4 打包后的可执行文件占用内存</h4><p>根据众多网友的测试得出的结果，Nuitka打包后的可执行文件占用内存较少，PyInstaller打包后的可执行文件占用内存较多。但是，作者通过demo的测试发现两者区别并不是很大，大概都在 10-15M 左右。</p><p><img src="https://wangxs020202.gitee.io/pbad/new/Nuitka_2023-04-20_16-47-58.png" alt="Nuitka_2023-04-20_16-47-58"></p><h4 id="5-5-打包后的可执行文件的兼容性"><a href="#5-5-打包后的可执行文件的兼容性" class="headerlink" title="5.5 打包后的可执行文件的兼容性"></a>5.5 打包后的可执行文件的兼容性</h4><p>Nuitka打包后的可执行文件的兼容性较好，PyInstaller打包后的可执行文件的兼容性较差。主要是在跨平台方面，Nuitka打包后的可执行文件可以在Windows、Linux、MacOS等平台上运行，而PyInstaller只能在打包平台上运行。</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>本文主要介绍了Nuitka和PyInstaller两种Python代码打包工具，介绍了它们的安装、使用方法，以及它们的对比。在实际使用中，作者发现Nuitka打包后的可执行文件的兼容性较好，运行速度较快，占用内存较少，而PyInstaller打包后的可执行文件的兼容性较差，运行速度较慢，占用内存较多。</p><p>相较于传统解释器，使用Nuitka编译器可以消除字节码执行过程中的一些瓶颈和无用操作，使得Python程序的执行效率大大提升。此外，通过编译优化，生成的可执行文件可以直接在目标平台上运行，不需要安装Python环境。同时，Nuitka提供了丰富的编译选项和调试工具，可以在不同平台和发布配置下生成高效、稳定和兼容性强的可执行文件。</p><p>总之，采用Nuitka编译器可以提高Python程序的性能和可靠性，并且拥有更好的移植性。对于Python开发者而言，学习和应用这一工具可以进一步提高Python开发的效率和质量。</p>]]></content>
      
      
      <categories>
          
          <category> Nuitka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Nuitka </tag>
            
            <tag> C++ </tag>
            
            <tag> PyQT5 </tag>
            
            <tag> PyInstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-matery主题添加Honkit电子书界面</title>
      <link href="/2023/04/19/hexo-matery-zhu-ti-tian-jia-honkit-dian-zi-shu-jie-mian/"/>
      <url>/2023/04/19/hexo-matery-zhu-ti-tian-jia-honkit-dian-zi-shu-jie-mian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h3><p>Honkit是一款基于Node.js的静态网站生成器，可以将Markdown文件转换为漂亮的静态网站或电子书形式。Honkit提供了多种主题和插件，并且具有自动化和灵活性强的特点，可以满足用户对文档撰写、发布和分享的需求，广泛应用于知识管理、技术文档等领域。</p><p>在Hexo-matery主题中添加Honkit电子书界面，可以让我们的博客同时拥有博客界面和电子书界面，这样既可以让我们的博客更加美观，又可以让我们的博客更加方便，让我们的博客更加有价值。 但是hexo只提供使用在hexo中使用Honkit主题的教程，而没有提供在Hexo-matery主题中添加Honkit电子书界面的教程。</p><p>作者在网上探索了好久，发现没有一篇教程能够让我在Hexo-matery主题中添加Honkit电子书界面，所以我决定自己写一篇教程，希望能够帮助到大家。</p><h3 id="二、使用Honkit主题"><a href="#二、使用Honkit主题" class="headerlink" title="二、使用Honkit主题"></a>二、使用Honkit主题</h3><p>如果你使用 Hexo 搭建博客，可以通过添加 Honkit 插件来支持 GitBook 风格的文档。下面是一些基本步骤：</p><ol><li><p>安装 hexo-plugin-honkit 插件：</p><p>在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">npm install hexo-plugin-honkit --save</code></pre></li><li><p>配置 _config.yml</p><p>打开你的博客根目录下的 _config.yml 文件，找到 plugins 属性并将其值设置为 honkit：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">plugins</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>plugin<span class="token punctuation">-</span>honkit</code></pre></li><li><p>添加 GitBook 风格的页面</p><p>在 source 目录下创建一个名为 docs 的文件夹，并在其中添加 Markdown 格式的文档。目录结构应该类似于以下示例：</p><pre class=" language-shell"><code class="language-shell">- source- docs    - getting-started.md    - installation.md    - ...      生成静态文件并启动服务器      在命令行中执行以下命令以生成静态文件：</code></pre></li><li><p>生成静态文件并启动服务器<br>在命令行中执行以下命令以生成静态文件：</p><pre class=" language-shell"><code class="language-shell">hexo generate</code></pre><p>完成之后执行以下命令以启动服务器并预览更改：</p><pre class=" language-shell"><code class="language-shell">hexo server</code></pre><p>此时，可以通过访问本地服务器地址（默认为 <a href="http://localhost:4000/">http://localhost:4000</a>）来查看你的博客和 GitBook 风格的页面。</p></li></ol><p>请注意，以上步骤不会影响你现有的博客主题和文章，只会添加 GitBook 风格的页面。</p><h3 id="三、在Hexo-matery主题中添加Honkit电子书界面"><a href="#三、在Hexo-matery主题中添加Honkit电子书界面" class="headerlink" title="三、在Hexo-matery主题中添加Honkit电子书界面"></a>三、在Hexo-matery主题中添加Honkit电子书界面</h3><p>作者在网上探索了好久，发现没有一篇教程能够让我在Hexo-matery主题中添加Honkit电子书界面，在多次的尝试下，最终也是曲线成功了，下面是详细的教程：</p><ol><li><p>安装Honkit</p><p>在命令行中执行以下命令：</p><pre class=" language-shell"><code class="language-shell">npm init --yesnpm install honkit --save-dev</code></pre><p>安装完成后，执行以下命令：</p><pre class=" language-shell"><code class="language-shell">npx honkit init</code></pre></li><li><p>编写电子书</p><p>具体编写方式大家可以参考<a href="https://honkit.netlify.app/">官方文档</a>，这里不再赘述。</p></li><li><p>搭建Honkit仓库</p><p>在GitHub上创建一个新的仓库，并将我们的电子书仓库推送到GitHub上。</p><p>这里我没又找到合适的办法在<code>Hexo generate</code>的时候自动将电子书仓库推送到GitHub上，所以我只能手动推送了，如果有大佬知道怎么做的话，欢迎在评论区留言告诉我。</p></li><li><p>添加Honkit电子书界面</p><p>这里的做法其实很简单，就是在<code>Hexo generate</code>生成静态页面后将Honkit生成的静态文件放到Hexo-matery主题的<code>public</code>目录下，然后在<code>Hexo s</code>或者<code>Hexo d</code>的时候就可以将Honkit生成的静态展示到我们的博客上了。具体做法如下：</p><p>编写<code>honkit-scripts.js</code>脚本：</p><pre class=" language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>copyDir<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hexo-fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定需要复制的源目录和目标目录</span><span class="token keyword">const</span> srcPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'Honkit/_book'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> destPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public/book'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>exec<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 复制目录</span><span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行 git 命令来拉取仓库的内容 username:你的GitHub用户名 proname:你的仓库名</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'git clone git@github.com:&lt;username>/&lt;pronanme>.git --sparse&amp;&amp;cd Honkit&amp;&amp;git sparse-checkout init --cone&amp;&amp;git sparse-checkout set _book'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Honkit clone 执行出错：$&amp;#123;error&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Honkit clone 执行成功：$&amp;#123;stdout&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">copyDir</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> destPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Copy file failed!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Copy file successfully!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除临时文件</span><span class="token comment" spellcheck="true">// exec('rm-rf Honkit', (error, stdout, stderr) => &amp;#123;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'rd/s/q Honkit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Honkit文件夹删除出错：$&amp;#123;error&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Honkit文件夹删除成功：$&amp;#123;stdout&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Source path '$&amp;#123;srcPath&amp;#125;' does not exist!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>效果查看</p><p>博客的首页<br><img src="https://wangxs020202.gitee.io/pbad/new/Honkit_2023-04-19_15-44-16.png" alt="Honkit_2023-04-19_15-44-16"></p><p>电子书的首页<br><img src="https://wangxs020202.gitee.io/pbad/new/Honkit_2023-04-19_15-44-42.png" alt="Honkit_2023-04-19_15-44-42"></p></li></ol><h3 id="四、结尾"><a href="#四、结尾" class="headerlink" title="四、结尾"></a>四、结尾</h3><p>虽然我们并没有在hexo-matery主题中添加Honkit电子书界面部署，但是我们通过脚本的方式将Honkit生成的静态文件放到了Hexo-matery主题的public目录下，然后在<code>Hexo s</code>或者<code>Hexo d</code>的时候就可以将Honkit生成的静态展示到我们的博客上了。</p><p>这里的教程只是简单的介绍了如何在Hexo-matery主题中添加Honkit电子书界面，如果大家有什么问题或者建议，欢迎在评论区留言，我会尽快回复大家的。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Honkit </tag>
            
            <tag> 静态网站 </tag>
            
            <tag> 电子书 </tag>
            
            <tag> Shell </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探究Celery的分布式任务队列在Python应用中的优越性</title>
      <link href="/2023/04/14/tan-suo-celery/"/>
      <url>/2023/04/14/tan-suo-celery/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Celery简介"><a href="#一、Celery简介" class="headerlink" title="一、Celery简介"></a>一、Celery简介</h3><p>Celery是一款Python语言编写的分布式任务队列框架，它基于消息中间件（如RabbitMQ、Redis等）实现异步任务的处理和调度，支持调度任务的排队、重试、回调以及监控报告等多种功能，解决了复杂业务场景下的处理效率问题。相比于其他同类框架，Celery具有更快的执行速度、更好的容错机制、更灵活的部署方式等优势。</p><h3 id="二、Celery的基本原理"><a href="#二、Celery的基本原理" class="headerlink" title="二、Celery的基本原理"></a>二、Celery的基本原理</h3><p>Celery的核心组件如下图所示：</p><p><img src="https://wangxs020202.gitee.io/images/me/celery.png" alt="Celery的核心组件"></p><p>Celery的核心组件如下：</p><ul><li>Task 任务</li></ul><p>Task是Celery的核心概念，代表一个需要异步执行的工作单元，开发者可以自行定义Task，并配置Task的一些属性，比如处理逻辑、超时时间、重试次数等。每个Task都必须定义一个run方法，Celery会在异步队列中选取合适的Worker执行该方法，并返回执行结果。</p><ul><li>Broker 中间件</li></ul><p>Broker是Celery中任务调度和消息传递的核心组件，其作用是将程序添加到队列中，以便在消费端的Worker中执行。Celery支持多种编程语言的消息中间件，包括RabbitMQ、Redis 、AMQP等。开发者可以根据实际情况选择最合适的Broker，以保证性能和可靠性。</p><ul><li>Worker 工作者</li></ul><p>Worker是Celery代码节点的执行者，它从中间件检索任务，将其发送给线程或进程池来处理任务，然后返回执行结果。我们可以使用Celery命令启动多个worker并分别配置不同的concurrency（并发数）和queues（任务队列），以实现更灵活和高效的任务调度。同时，Celery还提供了守护进程等方式运行worker，保证任务的持续运行。</p><h3 id="三、Celery的应用场景"><a href="#三、Celery的应用场景" class="headerlink" title="三、Celery的应用场景"></a>三、Celery的应用场景</h3><p>Celery的应用场景主要包括：</p><ul><li>Web应用</li></ul><p>Web应用通常需要处理大量复杂的请求，其中很多操作可能需要跟第三方服务集成（比如文件上传、邮箱验证等）。这样大量的I&#x2F;O操作会严重阻塞单进程应用的执行效率。通过使用Celery异步任务处理，可以将耗时的操作放到worker中异步执行，使得web应用变得响应更快、请求得到更加迅速的处理。判断与处理输入数据属性值的程序就是一个解释远程调用 Flask + Celery正在演示的场景。</p><ul><li>爬虫和数据处理</li></ul><p>很多爬虫和数据处理需要大量时间和计算资源来完成，当这些任务都阻塞在爬虫进程或数据接口的处理上时，如果采用同步串起来的方式，会让进程直接卡死或数据运算量庞大浪费 CPU 资源，而异步任务队列给了工具箱能力范式以及收获事件驱动的思想，不仅可以减轻内存峰值后会导致启动失败的负担。还能有效减少单进程数据计算的待机等待,同时重试机制也容易解决部分由于网络或者其他原因导致数据处理失败的问题，大幅度提升爬虫和数据处理的性能和可靠性。</p><ul><li>邮件发送</li></ul><p>邮件发送是一项常见且需要高可靠性的任务，但是受限于DNS查询和SMTP连接限制，频繁地发送多个电子邮件可能会导致单进程应用无法从阻塞中恢复。使用Celery异步任务队列和邮件发送插件（如Flower等），可以使得邮件任务全部放到后台worker处理，保证前端应用不卡死并且全面监管邮件本身的发送状态。</p><h3 id="四、Celery的集成"><a href="#四、Celery的集成" class="headerlink" title="四、Celery的集成"></a>四、Celery的集成</h3><h4 id="4-1-集成Flask"><a href="#4-1-集成Flask" class="headerlink" title="4.1 集成Flask"></a>4.1 集成Flask</h4><p>Flask是一个基于Python的轻量级Web应用框架，它提供了简单的API来实现Web应用的开发。Celery可以很方便地集成到Flask应用中，实现异步任务的处理和调度。</p><p>下面我们以一个简单的使用Flask+Celery搭建任务队列的Web应用为例进行说明，期望通过 Celery 来发挥异步任务在实际业务场景中的各种优势。</p><p>首先按照Celery官网的安装指引，安装好必备的依赖之后，在项目目录下编辑main.py文件来定义Celery的运行以及如何处理任务。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment" spellcheck="true">#创建celery实例对象</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">"tasks"</span><span class="token punctuation">,</span>broker<span class="token operator">=</span><span class="token string">"redis://localhost:6379/0"</span><span class="token punctuation">,</span>backend<span class="token operator">=</span><span class="token string">"redis://localhost:6379/0"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定义任务函数，并设置超时参数</span>@app<span class="token punctuation">.</span>task<span class="token punctuation">(</span>bind<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> default_retry_delay<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task_logout</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#执行具体操作，并返回结果信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Start to logout for user &amp;#123;user_email&amp;#125; at &amp;#123;time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> <span class="token string">"User has been logged out"</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#如果出现异常，则重试</span>    self<span class="token punctuation">.</span>retry<span class="token punctuation">(</span>exc<span class="token operator">=</span>ex<span class="token punctuation">)</span></code></pre><p>在main.py文件中，我们首先创建了一个Celery实例对象app，并配置了broker和backend。broker用于接收任务，backend用于存储任务执行结果。然后我们定义了一个task_logout的任务函数，该函数接收一个user_email参数，执行具体的操作，并返回执行结果。</p><h4 id="4-2-集成Django"><a href="#4-2-集成Django" class="headerlink" title="4.2 集成Django"></a>4.2 集成Django</h4><p>Django是一个基于Python的开源Web应用框架，它遵循MVT（Model-View-Template）的设计模式，提供了强大的ORM功能。Celery可以很方便地集成到Django应用中，实现异步任务的处理和调度。</p><p>下面我们以一个简单的使用Django+Celery搭建任务队列的Web应用为例进行说明，期望通过 Celery 来发挥异步任务在实际业务场景中的各种优势。</p><p>1、安装对应的库</p><pre class=" language-python"><code class="language-python">pip3 install celery<span class="token operator">==</span><span class="token number">4.4</span><span class="token punctuation">.</span><span class="token number">2</span>pip3 install eventlet<span class="token operator">==</span><span class="token number">0.25</span><span class="token punctuation">.</span><span class="token number">2</span>pip3 install Django<span class="token operator">==</span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">4</span></code></pre><p>2、配置settings文件：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#redis</span>CELERY_BROKER_URL <span class="token operator">=</span> <span class="token string">'redis://localhost:6379/'</span><span class="token comment" spellcheck="true">#broker配置redis</span>CELERY_RESULT_BACKEND <span class="token operator">=</span> <span class="token string">'redis://localhost:6379/'</span><span class="token comment" spellcheck="true">#文件格式为：json</span>CELERY_RESULT_SERIALIZER <span class="token operator">=</span> <span class="token string">'json'</span></code></pre><p>3、在settings文件同级目录创建celery.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token punctuation">,</span> unicode_literals<span class="token keyword">import</span> os<span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token comment" spellcheck="true"># 设置环境变量</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'Django项目名称.settings'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注册Celery的APP</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'Django项目名称'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绑定配置文件</span>app<span class="token punctuation">.</span>config_from_object<span class="token punctuation">(</span><span class="token string">'django.conf:settings'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'CELERY'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 自动发现各个app下的tasks.py文件</span>app<span class="token punctuation">.</span>autodiscover_tasks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#如果有需要可以将该任务设置成定时任务</span><span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabCELERY_BEAT_SCHEDULE <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token comment" spellcheck="true"># 周期性任务</span>    <span class="token string">'task-one'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'myapp.tasks.print_test'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> 周期时间<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'args': ()</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>4、修改settings文件同级目录的init.py文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token punctuation">,</span> unicode_literals<span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app <span class="token keyword">as</span> celery_app<span class="token comment" spellcheck="true">#导包</span><span class="token keyword">import</span> pymysql<span class="token comment" spellcheck="true">#初始化</span>pymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span>__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'celery_app'</span><span class="token punctuation">]</span></code></pre><p>5、在应用中创建tasks.py文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery<span class="token punctuation">.</span>task <span class="token keyword">import</span> task<span class="token comment" spellcheck="true"># 自定义要执行的task任务</span>@task<span class="token keyword">def</span> <span class="token function">print_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"nict try"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'hello'</span></code></pre><p>6、在视图页面进行调用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> myapp <span class="token keyword">import</span> tasks<span class="token keyword">def</span> <span class="token function">ctest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token operator">=</span>tasks<span class="token punctuation">.</span>print_test<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#delay方法就是异步方式请求</span>    <span class="token comment" spellcheck="true">#任务逻辑</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'status':'successful','task_id':res.task_id&amp;#125;)</span></code></pre><p>7、 在manage.py的目录下启动celery服务</p><pre class=" language-python"><code class="language-python">celery worker <span class="token operator">-</span>A mydjango <span class="token operator">-</span>l info <span class="token operator">-</span>P eventlet</code></pre><p>8、 在浏览器中调用异步服务接口</p><p><img src="https://wangxs020202.gitee.io/images/me/celery1.png" alt="celery"></p><p>同时也可以在backend中查询任务结果</p><p><img src="https://wangxs020202.gitee.io/images/me/celery2.png" alt="celery"></p><p>*****注：redis中的key并不是单纯的task_id，而是需要加上前缀celery-task-meta-</p><p>9、最后，如果需要启动定时任务，就需要在manage.py所在的文件夹内单独启动beat服务</p><pre class=" language-python"><code class="language-python">celery <span class="token operator">-</span>A mydjango beat <span class="token operator">-</span>l info</code></pre><h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><p>本文主要介绍了Celery的基本概念、应用场景、使用、集成等内容，希望能够帮助到大家。</p>]]></content>
      
      
      <categories>
          
          <category> Celery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> Flask </tag>
            
            <tag> Celery </tag>
            
            <tag> 分布式任务队列 </tag>
            
            <tag> 异步任务处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是嫉妒，还是营销。知乎热问：国家何时整治程序员的高薪现象？</title>
      <link href="/2023/04/14/hot-spot-one/"/>
      <url>/2023/04/14/hot-spot-one/</url>
      
        <content type="html"><![CDATA[<h3 id="一、国家何时整治程序员的高薪现象？"><a href="#一、国家何时整治程序员的高薪现象？" class="headerlink" title="一、国家何时整治程序员的高薪现象？"></a>一、国家何时整治程序员的高薪现象？</h3><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/image-20210815134358692.png" alt="image-20210815134358692"></p><p>近期在知乎上看到了这样一个问题，身为程序员的我好奇的进去看了一下。心想这一定是某个营销号发出来，为了博人眼球的。</p><p>知乎上本身就混迹着很多程序员，马上就有很多人来回答</p><p><strong>点赞并评论第一的，知友「硅谷IT胖子」算是说出了大部分开发者的心声！下面是他的回答：</strong></p><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/image-20210815135658683.png" alt="image-20210815135658683"></p><p>我看到这个热问的时候，标题并不是 “国家何时整治程序员的高薪现象？”，而是 “如何看待互联网行业收入远高于其他行业现象？”，或许题主觉得设计国家有些不妥，遂将其修改？</p><p><strong>之友[编程指北]的回答直击问题，下面是他的回答：</strong></p><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/image-20210815140247908.png" alt="image-20210815140247908"></p><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/image-20210815140300829.png" alt="image-20210815140300829"></p><p><em>对于[硅谷IT胖子]的回答是否说出了你们心声？</em></p><p>作为一名程序员，深知互联网行业的水有多深。在程序员的圈子里，没有官二代，也没有富二代，更没有有背景的人物。本身踏上这个职业的门槛就比较高，同时我们的工作时间，相信也是很多职业无法比的。</p><p>所以，大部分开发者的收入其实也都是辛苦钱。就如 「硅谷IT胖子」说得，这份钱我们赚的最诚实、最辛苦、最光明正大！</p><p>由这个问题可以看出它折射出的内核非常典型，不仅仅是专门某个行业，而是一种很常见的底层互害思维。</p><p>网络上有很多这样的段子，朋友，亲戚在你没有腾达时，对你不管不问，一旦你好起来，甚至都不需要到大富大贵的地步，另一方就抓狂了，跳脚了，各种扭曲的行为全都来了。</p><h3 id="二、程序员挣得多么？"><a href="#二、程序员挣得多么？" class="headerlink" title="二、程序员挣得多么？"></a>二、程序员挣得多么？</h3><p>2020年1月到2021年1月，各城市程序员的工资。程序员的薪资数据，在圈子里面是非常透明的，在各大网站上都能查到，从表中的数据来看2020年1月到2021年1月程序员的平均工资在15000左右，不同城市有不同的差异。</p><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/v2-349af7682a22b536703f64e6998d387a_720w.png" alt="image-20210815140300829"></p><p>这个工资在各个行业中的水平算是高的，但是为什么这么高？</p><p>国家目前能力强的程序员并不多，甚至有的科班出身的程序员大学四年甚至不会编码。为了迎合国家的科技创新，企业为了找的高质量的程序员会提高薪资，来刺激有能力的程序员。但是这种高质量的程序员在中国并不是很多，所以大多数企业的资本家以低薪资，来招能力不是很强的毕业生。</p><p><strong>在风口上 连猪都会飞</strong>，确实资本家都抓住了科技创新这个风口，那么程序员这个行业是否在风口。</p><p><img src="http://wangxs020202.gitee.io/pbad/skill-geek/pig.png" alt="image-20210815140300829"></p><p>是的，但是程序员只不过是中间的程序，得利的都是最后的资本家。资本家在程序员后操盘，使得在互联网行业中出现很多网络新语。什么<strong>996</strong>，<strong>阿里高管不法侵害女员工事件</strong>，<strong>拼多多员工跳楼</strong>等这些互联网的词条在近几年层出不穷。</p><p>如果说整治，最该整治的是谁？是程序员们背后的那些资本大佬，是那些为了攫取流量而哗众取宠的明星和网红。</p><p>资本利用钞能力，令外卖员困在系统里出不来，让无数市场小贩失去养家糊口的机会；流量明星日赚一爽，拍出一部部翔一样的偶像剧来辣观众的眼睛；网红们靠审丑来赚钱，无所不用其极。你说谁更不合理，谁更该整治？</p><p>和他们相比，程序员赚钱全凭自己能力，既正当又合理，简直是励志典型了好吗？！</p><p>程序员行业很可能是未来的华尔街。实际上2015年以后，已经有些技术人才博士毕业后，不再去华尔街而去Google等公司了。很多人惊叹：写码的原来也开始有选技术公司而不是金融的了！</p><p>讲这么多，不是说不能整治程序员，那归国家管。而是说整治的方式和效果——尤其是当前程序员收入透明、行业干净无外块、守法报税的情况下，真的很难抓到把柄。</p><p>而且程序员是真创造价值的人——我记得民间有个指数，就是用公司总营业额除以总程序员人数，看每个程序员平均创造多少价值，多年以前的数据是：Google大概100万美元&#x2F;年每人，FB好像也接近100万，微软60万左右。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>在现代社会，技术岗位的薪酬收入普遍较高，尤其是一些优秀的程序员和IT专业人士。针对这种现象，不同的人有不同的观点和态度。</p><p>有些人可能存在嫉妒心理，认为程序员赚得太多而不公平，并呼吁政府开展相关整治行动。但是这种视角忽略了市场经济的基本规律以及技术人才需求供应的实际情况，未必能解决事实上的问题。</p><p>另外一些人则从营销的角度出发，为自己的产品、服务或公司招聘人才进行激励，宣传高薪福利等，以此来吸引更多人才。他们意识到，与其抱怨当前薪酬状况，不如通过各种手段提高影响力和知名度，从而增强自己的议价能力和竞争力。</p><p>综上所述，针对程序员高薪现象，个人或团体可以选择不同的应对策略。对于政府而言，也应该关注人才培养、铺平晋升通道、放宽准入机制等方面发力，打造更加公平和有竞争力的市场环境。</p>]]></content>
      
      
      <categories>
          
          <category> 热点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热点 </tag>
            
            <tag> 程序员 </tag>
            
            <tag> 薪资 </tag>
            
            <tag> 高薪 </tag>
            
            <tag> 知乎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建ClickHouse+Zookeeper集群</title>
      <link href="/2023/04/14/docker-da-jian-clickhouse-zookeeper-ji-qun/"/>
      <url>/2023/04/14/docker-da-jian-clickhouse-zookeeper-ji-qun/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>Docker搭建ClickHouse+Zookeeper集群，是一种高效、灵活和可靠的解决方案，能够满足大规模数据处理和分析的需求。ClickHouse是一款开源的面向列存储的分布式数据库，可以快速地处理大范围的实时数据。而Zookeeper则是一个分布式的协调框架，为ClickHouse提供了多个节点之间协作运作的支持。</p><p>该集群的优势在于，Docker将应用程序、库和依赖项打包成标准镜像并提供容器隔离，简化了 ClickHouse 和 Zookeeper 的配置和部署流程，同时带来更灵活的资源分配和使用。并且，在集群中添加或移除节点都可以实现弹性扩缩容，在保证服务的质量和稳定性的同时，节约了企业的资源成本。</p><p>在这篇博客中，我们将会介绍如何借助Docker技术，使用Docker-Compose将ClickHouse+Zookeeper集群快速搭建至本地环境，并对集群的扩展、管理以及数据备份等方面进行深入的探讨。无论是初学者还是资深的技术爱好者，都能从中获得有价值的经验和知识，进一步掌握 Docker和分布式数据库基础知识，提高工作效率和技术实力。</p><h3 id="二、搭建"><a href="#二、搭建" class="headerlink" title="二、搭建"></a>二、搭建</h3><ol><li><p>需要创建一台<code>Ubuntu</code>系统的主机&#x2F;虚拟机</p></li><li><p>更换apt源</p><pre class=" language-shell"><code class="language-shell"># 备份信息sudo cp /etc/apt/sources.list /etc/apt/sources.list.bat# 打开配置文件进行修改sudo vi /etc/apt/sources.list# 删除所有数据换成一下信息</code></pre><pre class=" language-reStructuredText"><code class="language-reStructuredText">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable# deb-src [arch=amd64] https://download.docker.com/linux/ubuntu focal stable</code></pre><pre class=" language-shell"><code class="language-shell"># 更新aptsudo apt-get update</code></pre></li><li><p>搭建docker环境</p><pre class=" language-shell"><code class="language-shell"># 卸载旧的docker环境sudo apt-get remove docker docker-engine docker-ce docker.io# 安装以下包以使apt可以通过HTTPS使用存储库（repository）：sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common# 添加Docker官方的GPG密钥：curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -# 使用下面的命令来设置stable存储库：sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"# 安装最新版本的Docker CE：这个根据网络情况会比较慢sudo apt-get install -y docker-ce# 查看docker服务状态systemctl status docker# 如果没启动，则启动docker服务sudo systemctl start docker# 修改docker源# 进入阿里云 复制 加速器地址https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors# 修改/创建daemon配置文件/etc/docker/daemon.json来使用加速器sudo vim /etc/docker/daemon.json# 复制一下信息&#123;  "registry-mirrors": ["https://xxxxxxxx.mirror.aliyuncs.com"]&#125;</code></pre></li><li><p>拉取<code>yandex/clickhouse-server</code>、<code>zookeeper</code>镜像</p><pre class=" language-shell"><code class="language-shell">docker pull yandex/clickhouse-serverdocker pull zookeeper</code></pre></li><li><p>复制虚拟机</p><p>使用VMware直接复制</p></li><li><p>修改hosts</p><pre class=" language-shell"><code class="language-shell"># 三台服务器的ip分别是：117、105、103# 分别修改三台服务器的hosts文件vim /etc/hosts# 服务1 的ip192.168.3.117 server01# 服务2 的ip192.168.3.105 server02# 服务3 的ip192.168.3.103 server03</code></pre></li><li><p>Zookeeper集群搭建</p><pre class=" language-shell"><code class="language-shell"># 创建zk配置信息存放文件sudo mkdir /usr/softsudo mkdir /usr/soft/zookeeper</code></pre><p><strong>server01执行：</strong></p><pre class=" language-shell"><code class="language-shell">docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 --name zookeeper_node --restart always \-v /usr/soft/zookeeper/data:/data \-v /usr/soft/zookeeper/datalog:/datalog \-v /usr/soft/zookeeper/logs:/logs \-v /usr/soft/zookeeper/conf:/conf \--network host  \-e ZOO_MY_ID=1  zookeeper</code></pre><p><strong>server02执行：</strong></p><pre class=" language-shell"><code class="language-shell">docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 --name zookeeper_node --restart always \-v /usr/soft/zookeeper/data:/data \-v /usr/soft/zookeeper/datalog:/datalog \-v /usr/soft/zookeeper/logs:/logs \-v /usr/soft/zookeeper/conf:/conf \--network host  \-e ZOO_MY_ID=2  zookeeper</code></pre><p><strong>server03执行：</strong></p><pre class=" language-shell"><code class="language-shell">docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 --name zookeeper_node --restart always \-v /usr/soft/zookeeper/data:/data \-v /usr/soft/zookeeper/datalog:/datalog \-v /usr/soft/zookeeper/logs:/logs \-v /usr/soft/zookeeper/conf:/conf \--network host  \-e ZOO_MY_ID=3  zookeeper</code></pre><p>唯一的差别是： <code>-e ZOO_MY_ID=*</code> 而已。</p></li><li><p>修改zookeeper配置文件</p><p><code>/usr/soft/zookeeper/conf/zoo.cfg</code></p><pre class=" language-shell"><code class="language-shell">dataDir=/datadataLogDir=/datalogtickTime=2000initLimit=5syncLimit=2clientPort=2181autopurge.snapRetainCount=3autopurge.purgeInterval=0maxClientCnxns=60# 服务1 的ipserver.1=192.168.3.117:2888:3888# 服务2 的ipserver.2=192.168.3.105:2888:3888# 服务3 的ipserver.3=192.168.3.103:2888:3888</code></pre></li><li><p>验证zookeeper是否配置成功</p><pre class=" language-shell"><code class="language-shell">docker exec -it zookeeper_node /bin/bash./bin/zkServer.sh status</code></pre><p><strong>成功结果</strong></p><pre class=" language-shell"><code class="language-shell">ZooKeeper JMX enabled by defaultUsing config: /conf/zoo.cfgClient port found: 2181. Client address: localhost. Client SSL: false.Mode: follower</code></pre></li><li><p>Clickhouse集群部署</p><ul><li><p>拷贝出临时镜像配置</p><pre class=" language-shell"><code class="language-shell"># 运行一个临时容器，目的是为了将配置、数据、日志等信息存储到宿主机上：docker run --rm -d --name=temp-ch yandex/clickhouse-server# 拷贝容器内的文件：docker cp temp-ch:/etc/clickhouse-server/ /etc/</code></pre></li><li><p>修改配置文件<code>/etc/clickhouse-server/config.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listen_host</span><span class="token punctuation">></span></span>0.0.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listen_host</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timezone</span><span class="token punctuation">></span></span>Asia/Shanghai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timezone</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remote_servers</span> <span class="token attr-name">incl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickhouse_remote_servers<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include_from</span><span class="token punctuation">></span></span>/etc/clickhouse-server/metrika.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include_from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zookeeper</span> <span class="token attr-name">incl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zookeeper-servers<span class="token punctuation">"</span></span> <span class="token attr-name">optional</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span> <span class="token attr-name">incl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>macros<span class="token punctuation">"</span></span> <span class="token attr-name">optional</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li><li><p>拷贝配置文件到挂载文件下</p><pre class=" language-shell"><code class="language-shell"># 分别在server01 server02 server03 执行创建指令# 创建挂载文件 miansudo mkdir /usr/soft/clickhouse-serversudo mkdir /usr/soft/clickhouse-server/mainsudo mkdir /usr/soft/clickhouse-server/main/conf# 创建挂载文件 subsudo mkdir /usr/soft/clickhouse-server/subsudo mkdir /usr/soft/clickhouse-server/sub/conf# 拷贝配置文件cp -rf /etc/clickhouse-server/ /usr/soft/clickhouse-server/main/confcp -rf /etc/clickhouse-server/ /usr/soft/clickhouse-server/sub/conf</code></pre></li><li><p>修改每台服务器的scp配置</p><pre class=" language-shell"><code class="language-shell">vim /etc/ssh/sshd_config# 修改PermitRootLogin yes# 重启服务systemctl restart sshd </code></pre></li><li><p>分发到其他服务器</p><pre class=" language-shell"><code class="language-shell"># 拷贝配置到server02上scp -r /usr/soft/clickhouse-server/main/conf/ server02:/usr/soft/clickhouse-server/main/scp -r /usr/soft/clickhouse-server/sub/conf/ server02:/usr/soft/clickhouse-server/sub/# 拷贝配置到server03上scp -r /usr/soft/clickhouse-server/main/conf/ server03:/usr/soft/clickhouse-server/main/scp -r /usr/soft/clickhouse-server/sub/conf/ server03:/usr/soft/clickhouse-server/sub/</code></pre></li><li><p>删除掉临时容器</p><pre class=" language-shell"><code class="language-shell">docker rm -f temp-ch</code></pre></li><li><p>进入<code>server01</code>修改<code>/usr/soft/clickhouse-server/sub/conf/config.xml</code>为了和主分片 <strong>main</strong>的配置区分开来</p><pre class=" language-XML"><code class="language-XML">原：<http_port>8123</http_port><tcp_port>9000</tcp_port><mysql_port>9004</mysql_port><postgresql_port>9005</postgresql_port><interserver_http_port>9009</interserver_http_port>修改为：<http_port>8124</http_port><tcp_port>9001</tcp_port><mysql_port>9005</mysql_port><!--<postgresql_port>9005</postgresql_port>--><interserver_http_port>9010</interserver_http_port></code></pre><p><strong>server02</strong>和<strong>server03</strong>如此修改或scp命令进行分发</p></li><li><p><code>server01</code>新增集群配置文件<code>/usr/soft/clickhouse-server/main/conf/metrika.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>yandex</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- CH集群配置,所有服务器都一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clickhouse_remote_servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cluster_3s_1r</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片1  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片2  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片3  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cluster_3s_1r</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clickhouse_remote_servers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- zookeeper_servers所有实例配置都一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zookeeper-servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.117<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.105<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.103<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zookeeper-servers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- marcos每个实例配置不一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-01-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>networks</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ip</span><span class="token punctuation">></span></span>::/0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ip</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>networks</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 数据压缩算法  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clickhouse_compression</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>min_part_size</span><span class="token punctuation">></span></span>10000000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>min_part_size</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>min_part_size_ratio</span><span class="token punctuation">></span></span>0.01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>min_part_size_ratio</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>method</span><span class="token punctuation">></span></span>lz4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clickhouse_compression</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>yandex</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>server01</code>新增集群配置文件<code>/usr/soft/clickhouse-server/sub/conf/metrika.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>yandex</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- CH集群配置,所有服务器都一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clickhouse_remote_servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cluster_3s_1r</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片1  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片2  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 数据分片3  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>internal_replication</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>internal_replication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>server02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cluster_3s_1r</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clickhouse_remote_servers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- zookeeper_servers所有实例配置都一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zookeeper-servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.117<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.105<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>192.168.3.103<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zookeeper-servers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- marcos每个实例配置不一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-02-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>networks</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ip</span><span class="token punctuation">></span></span>::/0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ip</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>networks</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 数据压缩算法  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clickhouse_compression</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>min_part_size</span><span class="token punctuation">></span></span>10000000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>min_part_size</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>min_part_size_ratio</span><span class="token punctuation">></span></span>0.01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>min_part_size_ratio</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>method</span><span class="token punctuation">></span></span>lz4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>method</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clickhouse_compression</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>yandex</span><span class="token punctuation">></span></span></code></pre></li><li><p>将<code>server01</code>新增的两个<code>metrika.xml</code>文件分发到<code>server02</code>,<code>server03</code></p><pre class=" language-shell"><code class="language-shell"># server02scp -r /usr/soft/clickhouse-server/main/conf/metrika.xml server02:/usr/soft/clickhouse-server/main/confscp -r /usr/soft/clickhouse-server/sub/conf/metrika.xml server02:/usr/soft/clickhouse-server/sub/conf# server03scp -r /usr/soft/clickhouse-server/main/conf/metrika.xml server03:/usr/soft/clickhouse-server/main/confscp -r /usr/soft/clickhouse-server/sub/conf/metrika.xml server03:/usr/soft/clickhouse-server/sub/conf</code></pre></li><li><p>修改<code>server02</code>,<code>server03</code>的<code>metrika.xml</code>文件</p><pre class=" language-xml"><code class="language-xml"># server02 main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-02-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span># server02 sub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-03-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span># server03 main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-03-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span># server03 sub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>macros</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shard</span><span class="token punctuation">></span></span>02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shard</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>replica</span><span class="token punctuation">></span></span>cluster01-01-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>replica</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>macros</span><span class="token punctuation">></span></span></code></pre><p><strong>至此，已经完成全部配置，其他的比如密码等配置，可以按需增加。</strong></p></li></ul></li><li><p>集群运行与测试</p><p>在每一台服务器上依次运行实例，zookeeper前面已经提前运行，没有则需先运行zk集群</p><p><strong>在每台服务器执行命令，唯一不同的参数是hostname</strong></p><ul><li><p>运行main实例</p><pre class=" language-shell"><code class="language-shell">docker run -d --name=ch-main -p 8123:8123 -p 9000:9000 -p 9009:9009 --ulimit nofile=262144:262144 \-v /usr/soft/clickhouse-server/main/data:/var/lib/clickhouse:rw \-v /usr/soft/clickhouse-server/main/conf:/etc/clickhouse-server:rw \-v /usr/soft/clickhouse-server/main/log:/var/log/clickhouse-server:rw \--add-host server01:192.168.3.117 \--add-host server02:192.168.3.105 \--add-host server03:192.168.3.103 \--hostname server01 \--network host \--restart=always \ yandex/clickhouse-server</code></pre></li><li><p>运行sub实例</p><pre class=" language-shel"><code class="language-shel">docker run -d --name=ch-sub -p 8124:8124 -p 9001:9001 -p 9010:9010 --ulimit nofile=262144:262144 \-v /usr/soft/clickhouse-server/sub/data:/var/lib/clickhouse:rw \-v /usr/soft/clickhouse-server/sub/conf:/etc/clickhouse-server:rw \-v /usr/soft/clickhouse-server/sub/log:/var/log/clickhouse-server:rw \--add-host server01:192.168.3.117 \--add-host server02:192.168.3.105 \--add-host server03:192.168.3.103 \--hostname server01 \--network host \--restart=always \ yandex/clickhouse-server</code></pre></li><li><p>在每台服务器的实例都启动之后，这里使用正版DataGrip来打开</p></li><li><p>执行 <code>select * from system.clusters</code> 查询集群</p></li><li><p>在任一实例上新建一个查询</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> T_UserTest <span class="token keyword">on</span> cluster cluster_3s_1r<span class="token punctuation">(</span>    ts  <span class="token keyword">DateTime</span><span class="token punctuation">,</span>    uid String<span class="token punctuation">,</span>    biz String<span class="token punctuation">)</span>    <span class="token keyword">engine</span> <span class="token operator">=</span> ReplicatedMergeTree<span class="token punctuation">(</span>'<span class="token operator">/</span>clickhouse<span class="token operator">/</span><span class="token keyword">tables</span><span class="token operator">/</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;layer&amp;#125;-&amp;#123;shard&amp;#125;/T_UserTest', '&amp;#123;replica&amp;#125;')</span>        <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> toYYYYMMDD<span class="token punctuation">(</span>ts<span class="token punctuation">)</span>        <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ts        SETTINGS index_granularity <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span></code></pre><p><strong>cluster_3s_1r是前面配置的集群名称，需一一对应上， &#x2F;clickhouse&#x2F;tables&#x2F; 是固定的前缀，相关语法可以查看官方文档了。</strong></p><p>刷新每个实例，即可看到全部实例中都有这张T_UserTest表，因为已经搭建zookeeper，很容易实现分布式DDL。</p></li><li><p>新建Distributed分布式表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> T_UserTest_All <span class="token keyword">ON</span> CLUSTER cluster_3s_1r <span class="token keyword">AS</span> T_UserTest <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">Distributed</span><span class="token punctuation">(</span>cluster_3s_1r<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">,</span>  T_UserTest<span class="token punctuation">,</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>每个主分片分别插入相关信息：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--server01</span><span class="token keyword">insert</span> <span class="token keyword">into</span>  T_UserTest <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2021-08-16 17:00:00'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--server02</span><span class="token keyword">insert</span> <span class="token keyword">into</span>  T_UserTest <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2021-08-16 17:00:00'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--server03</span><span class="token keyword">insert</span> <span class="token keyword">into</span>  T_UserTest <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2021-08-16 17:00:00'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><strong>查询对应的副本表或者关闭其中一台服务器的docker实例，查询也是不受影响，时间关系不在测试</strong></p></li></ul></li></ol><h3 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h3><p>本篇博客介绍了如何借助Docker技术，通过使用Docker-Compose快速搭建ClickHouse+Zookeeper集群，并实现扩展节点、数据备份等资料处理方案，最终实现了高可靠性、高性能和高灵活性的大数据处理和分析。这种基于容器化、分布式技术的解决方案与传统中心式单体架构相比，具有更好的故障处理、增强效率、运维便利和易于管理等多方面的优越性。</p><p>在搭建过程中，我们深入探究了ClickHouse 和 Zookeeper 的特性及用途，在容器环境下运行它们并配置好了每个组件的网络和访问方法。我们同时关注到容器资源的调配策略、数据备份的独立存储、服务治理的容错性等问题，帮助读者全面掌握了 Docker 集群管理和优化的基本方法。</p><p>总之，本篇博客旨在提供一种端到端指导，使您更好地了解使用 Docker 搭建 ClickHouse+Zookeeper 集群的过程，可以在企业级大数据应用中发挥出强大的作用，并极大地促进业务发展。希望在今后的工作中为读者提供启示和指导，让技术更好的转化为实际价值。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db </tag>
            
            <tag> Docker </tag>
            
            <tag> ClickHouse </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
